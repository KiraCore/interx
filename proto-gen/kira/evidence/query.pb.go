// Code generated by protoc-gen-go. DO NOT EDIT.
// source: kira/evidence/query.proto

package types

import (
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	anypb "google.golang.org/protobuf/types/known/anypb"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// QueryEvidenceRequest is the request type for the Query/Evidence RPC method.
type QueryEvidenceRequest struct {
	// evidence_hash defines the hash of the requested evidence.
	EvidenceHash         []byte   `protobuf:"bytes,1,opt,name=evidence_hash,json=evidenceHash,proto3" json:"evidence_hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryEvidenceRequest) Reset()         { *m = QueryEvidenceRequest{} }
func (m *QueryEvidenceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEvidenceRequest) ProtoMessage()    {}
func (*QueryEvidenceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0affbd5e02a9fc1, []int{0}
}

func (m *QueryEvidenceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryEvidenceRequest.Unmarshal(m, b)
}
func (m *QueryEvidenceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryEvidenceRequest.Marshal(b, m, deterministic)
}
func (m *QueryEvidenceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEvidenceRequest.Merge(m, src)
}
func (m *QueryEvidenceRequest) XXX_Size() int {
	return xxx_messageInfo_QueryEvidenceRequest.Size(m)
}
func (m *QueryEvidenceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEvidenceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEvidenceRequest proto.InternalMessageInfo

func (m *QueryEvidenceRequest) GetEvidenceHash() []byte {
	if m != nil {
		return m.EvidenceHash
	}
	return nil
}

// QueryEvidenceResponse is the response type for the Query/Evidence RPC method.
type QueryEvidenceResponse struct {
	// evidence returns the requested evidence.
	Evidence             *anypb.Any `protobuf:"bytes,1,opt,name=evidence,proto3" json:"evidence,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *QueryEvidenceResponse) Reset()         { *m = QueryEvidenceResponse{} }
func (m *QueryEvidenceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEvidenceResponse) ProtoMessage()    {}
func (*QueryEvidenceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0affbd5e02a9fc1, []int{1}
}

func (m *QueryEvidenceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryEvidenceResponse.Unmarshal(m, b)
}
func (m *QueryEvidenceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryEvidenceResponse.Marshal(b, m, deterministic)
}
func (m *QueryEvidenceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEvidenceResponse.Merge(m, src)
}
func (m *QueryEvidenceResponse) XXX_Size() int {
	return xxx_messageInfo_QueryEvidenceResponse.Size(m)
}
func (m *QueryEvidenceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEvidenceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEvidenceResponse proto.InternalMessageInfo

func (m *QueryEvidenceResponse) GetEvidence() *anypb.Any {
	if m != nil {
		return m.Evidence
	}
	return nil
}

// QueryEvidenceRequest is the request type for the Query/AllEvidence RPC
// method.
type QueryAllEvidenceRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination           *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *QueryAllEvidenceRequest) Reset()         { *m = QueryAllEvidenceRequest{} }
func (m *QueryAllEvidenceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllEvidenceRequest) ProtoMessage()    {}
func (*QueryAllEvidenceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0affbd5e02a9fc1, []int{2}
}

func (m *QueryAllEvidenceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryAllEvidenceRequest.Unmarshal(m, b)
}
func (m *QueryAllEvidenceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryAllEvidenceRequest.Marshal(b, m, deterministic)
}
func (m *QueryAllEvidenceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllEvidenceRequest.Merge(m, src)
}
func (m *QueryAllEvidenceRequest) XXX_Size() int {
	return xxx_messageInfo_QueryAllEvidenceRequest.Size(m)
}
func (m *QueryAllEvidenceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllEvidenceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllEvidenceRequest proto.InternalMessageInfo

func (m *QueryAllEvidenceRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllEvidenceResponse is the response type for the Query/AllEvidence RPC
// method.
type QueryAllEvidenceResponse struct {
	// evidence returns all evidences.
	Evidence []*anypb.Any `protobuf:"bytes,1,rep,name=evidence,proto3" json:"evidence,omitempty"`
	// pagination defines the pagination in the response.
	Pagination           *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *QueryAllEvidenceResponse) Reset()         { *m = QueryAllEvidenceResponse{} }
func (m *QueryAllEvidenceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllEvidenceResponse) ProtoMessage()    {}
func (*QueryAllEvidenceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0affbd5e02a9fc1, []int{3}
}

func (m *QueryAllEvidenceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryAllEvidenceResponse.Unmarshal(m, b)
}
func (m *QueryAllEvidenceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryAllEvidenceResponse.Marshal(b, m, deterministic)
}
func (m *QueryAllEvidenceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllEvidenceResponse.Merge(m, src)
}
func (m *QueryAllEvidenceResponse) XXX_Size() int {
	return xxx_messageInfo_QueryAllEvidenceResponse.Size(m)
}
func (m *QueryAllEvidenceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllEvidenceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllEvidenceResponse proto.InternalMessageInfo

func (m *QueryAllEvidenceResponse) GetEvidence() []*anypb.Any {
	if m != nil {
		return m.Evidence
	}
	return nil
}

func (m *QueryAllEvidenceResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryEvidenceRequest)(nil), "kira.evidence.QueryEvidenceRequest")
	proto.RegisterType((*QueryEvidenceResponse)(nil), "kira.evidence.QueryEvidenceResponse")
	proto.RegisterType((*QueryAllEvidenceRequest)(nil), "kira.evidence.QueryAllEvidenceRequest")
	proto.RegisterType((*QueryAllEvidenceResponse)(nil), "kira.evidence.QueryAllEvidenceResponse")
}

func init() { proto.RegisterFile("kira/evidence/query.proto", fileDescriptor_b0affbd5e02a9fc1) }

var fileDescriptor_b0affbd5e02a9fc1 = []byte{
	// 444 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xcf, 0x8b, 0xd3, 0x40,
	0x14, 0xc7, 0x49, 0x45, 0x59, 0x66, 0x77, 0x2f, 0x43, 0xc5, 0xdd, 0x20, 0xa8, 0x59, 0xd9, 0xd5,
	0x45, 0x66, 0xec, 0xae, 0x07, 0x3d, 0xb6, 0xa2, 0x56, 0xbc, 0x68, 0x8e, 0x82, 0xc8, 0xa4, 0x7d,
	0x26, 0x43, 0xd3, 0x99, 0x34, 0x33, 0x29, 0x0d, 0xe2, 0xc5, 0x9b, 0x37, 0x41, 0xfc, 0x17, 0xfc,
	0x87, 0xbc, 0x7b, 0xf2, 0xaf, 0xf0, 0x24, 0x99, 0xcc, 0xb4, 0xe9, 0x0f, 0x36, 0xb7, 0x97, 0xbc,
	0x1f, 0xdf, 0xcf, 0xbc, 0xf7, 0x45, 0xc7, 0x13, 0x9e, 0x33, 0x0a, 0x73, 0x3e, 0x06, 0x31, 0x02,
	0x3a, 0x2b, 0x20, 0x2f, 0x49, 0x96, 0x4b, 0x2d, 0xf1, 0x61, 0x95, 0x22, 0x2e, 0xe5, 0x9f, 0x8f,
	0xa4, 0x9a, 0x4a, 0x45, 0x23, 0xa6, 0x6c, 0x1d, 0x9d, 0xf7, 0x22, 0xd0, 0xac, 0x47, 0x33, 0x16,
	0x73, 0xc1, 0x34, 0x97, 0xa2, 0x6e, 0xf5, 0xbb, 0xb1, 0x8c, 0xa5, 0x09, 0x69, 0x15, 0xd9, 0xbf,
	0xc7, 0xb1, 0x94, 0x71, 0x0a, 0xd4, 0x7c, 0x45, 0xc5, 0x27, 0xca, 0x84, 0xd5, 0xf2, 0x6f, 0xdb,
	0x14, 0xcb, 0x38, 0x65, 0x42, 0x48, 0x6d, 0xa6, 0xa9, 0x3a, 0x1b, 0x14, 0xa8, 0xfb, 0xae, 0x12,
	0x7c, 0x61, 0x59, 0x42, 0x98, 0x15, 0xa0, 0x34, 0xfe, 0x80, 0x0e, 0x1d, 0xde, 0xc7, 0x84, 0xa9,
	0xe4, 0xc8, 0xbb, 0xeb, 0x3d, 0x38, 0x18, 0x3c, 0xfd, 0xf7, 0xe7, 0xce, 0x93, 0x98, 0xeb, 0xa4,
	0x88, 0xc8, 0x48, 0x4e, 0xa9, 0x06, 0x31, 0x86, 0x7c, 0xca, 0x85, 0x6e, 0x86, 0x29, 0x8f, 0x14,
	0x8d, 0x4a, 0x0d, 0x8a, 0x0c, 0x61, 0x31, 0xa8, 0x82, 0xf0, 0xc0, 0x8d, 0x1b, 0x32, 0x95, 0x04,
	0xaf, 0xd1, 0xcd, 0x0d, 0x59, 0x95, 0x49, 0xa1, 0x00, 0x3f, 0x46, 0x7b, 0xae, 0xd0, 0x48, 0xee,
	0x5f, 0x74, 0x49, 0xfd, 0x00, 0xe2, 0xde, 0x46, 0xfa, 0xa2, 0x0c, 0x97, 0x55, 0x01, 0x43, 0xb7,
	0xcc, 0xa8, 0x7e, 0x9a, 0x6e, 0x3e, 0xe2, 0x25, 0x42, 0xab, 0xfd, 0xd9, 0x71, 0xa7, 0xa4, 0x5e,
	0x36, 0xa9, 0x96, 0x4d, 0xea, 0xa3, 0xd8, 0x65, 0x93, 0xb7, 0x2c, 0x76, 0xbd, 0x61, 0xa3, 0x33,
	0xf8, 0xe9, 0xa1, 0xa3, 0x6d, 0x8d, 0x9d, 0xc4, 0xd7, 0xda, 0x89, 0xf1, 0xab, 0x35, 0xac, 0x8e,
	0xc1, 0x3a, 0x6b, 0xc5, 0xaa, 0xe5, 0x9a, 0x5c, 0x17, 0xbf, 0x3a, 0xe8, 0xba, 0xe1, 0xc2, 0xdf,
	0x3d, 0xb4, 0xe7, 0xc8, 0xf0, 0x09, 0x59, 0xb3, 0x17, 0xd9, 0x75, 0x60, 0xff, 0xfe, 0xd5, 0x45,
	0xb5, 0x5a, 0xf0, 0xec, 0xeb, 0xef, 0xbf, 0x3f, 0x3a, 0x97, 0xb8, 0x47, 0xad, 0x45, 0x97, 0x76,
	0x76, 0x06, 0x5d, 0xfe, 0xf8, 0xbc, 0xe6, 0x97, 0x2f, 0xf8, 0x9b, 0x87, 0xf6, 0x1b, 0xfb, 0xc2,
	0xa7, 0xbb, 0x04, 0xb7, 0x8f, 0xe6, 0x9f, 0xb5, 0xd6, 0x59, 0xb6, 0x87, 0x86, 0xed, 0x04, 0xdf,
	0x6b, 0x65, 0x1b, 0x3c, 0x7a, 0x7f, 0xde, 0x30, 0xed, 0x1b, 0x9e, 0xb3, 0xe7, 0x32, 0x07, 0xaa,
	0x60, 0xc2, 0x38, 0x5d, 0xac, 0x1a, 0x75, 0x99, 0x81, 0x8a, 0x6e, 0x98, 0xbb, 0x5d, 0xfe, 0x0f,
	0x00, 0x00, 0xff, 0xff, 0xdb, 0x76, 0xd7, 0x17, 0xc1, 0x03, 0x00, 0x00,
}
