// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: kira/gov/query.proto

package gov

import (
	base "github.com/KiraCore/interx/proto-gen/cosmos/base"
	_ "github.com/gogo/protobuf/gogoproto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// QueryProposalRequest is the request type for the Query/Proposal RPC method.
type QueryProposalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// proposal_id defines the unique id of the proposal.
	ProposalId uint64 `protobuf:"varint,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
}

func (x *QueryProposalRequest) Reset() {
	*x = QueryProposalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProposalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProposalRequest) ProtoMessage() {}

func (x *QueryProposalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProposalRequest.ProtoReflect.Descriptor instead.
func (*QueryProposalRequest) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{0}
}

func (x *QueryProposalRequest) GetProposalId() uint64 {
	if x != nil {
		return x.ProposalId
	}
	return 0
}

// QueryProposalResponse is the response type for the Query/Proposal RPC method.
type QueryProposalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proposal *Proposal `protobuf:"bytes,1,opt,name=proposal,proto3" json:"proposal,omitempty"`
}

func (x *QueryProposalResponse) Reset() {
	*x = QueryProposalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProposalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProposalResponse) ProtoMessage() {}

func (x *QueryProposalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProposalResponse.ProtoReflect.Descriptor instead.
func (*QueryProposalResponse) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{1}
}

func (x *QueryProposalResponse) GetProposal() *Proposal {
	if x != nil {
		return x.Proposal
	}
	return nil
}

// QueryProposalsRequest is the request type for the Query/Proposals RPC method.
type QueryProposalsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// voter defines the voter address for the proposals.
	Voter      string            `protobuf:"bytes,1,opt,name=voter,proto3" json:"voter,omitempty"`
	Pagination *base.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	All        bool              `protobuf:"varint,3,opt,name=all,proto3" json:"all,omitempty"`
	Reverse    bool              `protobuf:"varint,4,opt,name=reverse,proto3" json:"reverse,omitempty"`
}

func (x *QueryProposalsRequest) Reset() {
	*x = QueryProposalsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProposalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProposalsRequest) ProtoMessage() {}

func (x *QueryProposalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProposalsRequest.ProtoReflect.Descriptor instead.
func (*QueryProposalsRequest) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{2}
}

func (x *QueryProposalsRequest) GetVoter() string {
	if x != nil {
		return x.Voter
	}
	return ""
}

func (x *QueryProposalsRequest) GetPagination() *base.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryProposalsRequest) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

func (x *QueryProposalsRequest) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

// QueryProposalsResponse is the response type for the Query/Proposals RPC
// method.
type QueryProposalsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proposals  []*Proposal        `protobuf:"bytes,1,rep,name=proposals,proto3" json:"proposals,omitempty"`
	Pagination *base.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryProposalsResponse) Reset() {
	*x = QueryProposalsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProposalsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProposalsResponse) ProtoMessage() {}

func (x *QueryProposalsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProposalsResponse.ProtoReflect.Descriptor instead.
func (*QueryProposalsResponse) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{3}
}

func (x *QueryProposalsResponse) GetProposals() []*Proposal {
	if x != nil {
		return x.Proposals
	}
	return nil
}

func (x *QueryProposalsResponse) GetPagination() *base.PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// QueryDataReferenceKeysRequest is the response type for data reference keys query.
type QueryDataReferenceKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *base.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryDataReferenceKeysRequest) Reset() {
	*x = QueryDataReferenceKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDataReferenceKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDataReferenceKeysRequest) ProtoMessage() {}

func (x *QueryDataReferenceKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDataReferenceKeysRequest.ProtoReflect.Descriptor instead.
func (*QueryDataReferenceKeysRequest) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{4}
}

func (x *QueryDataReferenceKeysRequest) GetPagination() *base.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// QueryDataReferenceKeysResponse is the response type for data reference keys query.
type QueryDataReferenceKeysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys       []string           `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	Pagination *base.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryDataReferenceKeysResponse) Reset() {
	*x = QueryDataReferenceKeysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDataReferenceKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDataReferenceKeysResponse) ProtoMessage() {}

func (x *QueryDataReferenceKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDataReferenceKeysResponse.ProtoReflect.Descriptor instead.
func (*QueryDataReferenceKeysResponse) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{5}
}

func (x *QueryDataReferenceKeysResponse) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *QueryDataReferenceKeysResponse) GetPagination() *base.PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// QueryDataReferenceRequest is the response type for data reference query.
type QueryDataReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *QueryDataReferenceRequest) Reset() {
	*x = QueryDataReferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDataReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDataReferenceRequest) ProtoMessage() {}

func (x *QueryDataReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDataReferenceRequest.ProtoReflect.Descriptor instead.
func (*QueryDataReferenceRequest) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{6}
}

func (x *QueryDataReferenceRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

// QueryDataReferenceResponse is the response type for data referencequery.
type QueryDataReferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *DataRegistryEntry `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryDataReferenceResponse) Reset() {
	*x = QueryDataReferenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDataReferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDataReferenceResponse) ProtoMessage() {}

func (x *QueryDataReferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDataReferenceResponse.ProtoReflect.Descriptor instead.
func (*QueryDataReferenceResponse) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{7}
}

func (x *QueryDataReferenceResponse) GetData() *DataRegistryEntry {
	if x != nil {
		return x.Data
	}
	return nil
}

// QueryWhitelistedProposalVotersRequest is the request type for Query/WhitelistedProposalVoters RPC method.
type QueryWhitelistedProposalVotersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// proposal_id defines the unique id of the proposal.
	ProposalId uint64 `protobuf:"varint,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
}

func (x *QueryWhitelistedProposalVotersRequest) Reset() {
	*x = QueryWhitelistedProposalVotersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryWhitelistedProposalVotersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryWhitelistedProposalVotersRequest) ProtoMessage() {}

func (x *QueryWhitelistedProposalVotersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryWhitelistedProposalVotersRequest.ProtoReflect.Descriptor instead.
func (*QueryWhitelistedProposalVotersRequest) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{8}
}

func (x *QueryWhitelistedProposalVotersRequest) GetProposalId() uint64 {
	if x != nil {
		return x.ProposalId
	}
	return 0
}

// QueryWhitelistedProposalVotersResponse is the response type for Query/WhitelistedProposalVoters RPC method.
type QueryWhitelistedProposalVotersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Voters []*NetworkActor `protobuf:"bytes,1,rep,name=voters,proto3" json:"voters,omitempty"`
}

func (x *QueryWhitelistedProposalVotersResponse) Reset() {
	*x = QueryWhitelistedProposalVotersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryWhitelistedProposalVotersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryWhitelistedProposalVotersResponse) ProtoMessage() {}

func (x *QueryWhitelistedProposalVotersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryWhitelistedProposalVotersResponse.ProtoReflect.Descriptor instead.
func (*QueryWhitelistedProposalVotersResponse) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{9}
}

func (x *QueryWhitelistedProposalVotersResponse) GetVoters() []*NetworkActor {
	if x != nil {
		return x.Voters
	}
	return nil
}

// QueryVotesRequest is the request type for the Query/Votes RPC method.
type QueryVotesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// proposal_id defines the unique id of the proposal.
	ProposalId uint64 `protobuf:"varint,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
}

func (x *QueryVotesRequest) Reset() {
	*x = QueryVotesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryVotesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryVotesRequest) ProtoMessage() {}

func (x *QueryVotesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryVotesRequest.ProtoReflect.Descriptor instead.
func (*QueryVotesRequest) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{10}
}

func (x *QueryVotesRequest) GetProposalId() uint64 {
	if x != nil {
		return x.ProposalId
	}
	return 0
}

// QueryVotesResponse is the response type for the Query/Votes RPC method.
type QueryVotesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// votes defined the queried votes.
	Votes []*Vote `protobuf:"bytes,1,rep,name=votes,proto3" json:"votes,omitempty"`
}

func (x *QueryVotesResponse) Reset() {
	*x = QueryVotesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryVotesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryVotesResponse) ProtoMessage() {}

func (x *QueryVotesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryVotesResponse.ProtoReflect.Descriptor instead.
func (*QueryVotesResponse) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{11}
}

func (x *QueryVotesResponse) GetVotes() []*Vote {
	if x != nil {
		return x.Votes
	}
	return nil
}

// NetworkPropertiesRequest is the request type for the NetworkProperties Query
type NetworkPropertiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NetworkPropertiesRequest) Reset() {
	*x = NetworkPropertiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkPropertiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkPropertiesRequest) ProtoMessage() {}

func (x *NetworkPropertiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkPropertiesRequest.ProtoReflect.Descriptor instead.
func (*NetworkPropertiesRequest) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{12}
}

// NetworkPropertiesResponse is the response type for the NetworkProperties Query
type NetworkPropertiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Properties *NetworkProperties `protobuf:"bytes,1,opt,name=properties,proto3" json:"properties,omitempty"`
}

func (x *NetworkPropertiesResponse) Reset() {
	*x = NetworkPropertiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkPropertiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkPropertiesResponse) ProtoMessage() {}

func (x *NetworkPropertiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkPropertiesResponse.ProtoReflect.Descriptor instead.
func (*NetworkPropertiesResponse) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{13}
}

func (x *NetworkPropertiesResponse) GetProperties() *NetworkProperties {
	if x != nil {
		return x.Properties
	}
	return nil
}

type QueryIdentityRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QueryIdentityRecordRequest) Reset() {
	*x = QueryIdentityRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryIdentityRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryIdentityRecordRequest) ProtoMessage() {}

func (x *QueryIdentityRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryIdentityRecordRequest.ProtoReflect.Descriptor instead.
func (*QueryIdentityRecordRequest) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{14}
}

func (x *QueryIdentityRecordRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QueryIdentityRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Record *IdentityRecord `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
}

func (x *QueryIdentityRecordResponse) Reset() {
	*x = QueryIdentityRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryIdentityRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryIdentityRecordResponse) ProtoMessage() {}

func (x *QueryIdentityRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryIdentityRecordResponse.ProtoReflect.Descriptor instead.
func (*QueryIdentityRecordResponse) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{15}
}

func (x *QueryIdentityRecordResponse) GetRecord() *IdentityRecord {
	if x != nil {
		return x.Record
	}
	return nil
}

type QueryIdentityRecordsByAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Creator []byte   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Keys    []string `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *QueryIdentityRecordsByAddressRequest) Reset() {
	*x = QueryIdentityRecordsByAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryIdentityRecordsByAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryIdentityRecordsByAddressRequest) ProtoMessage() {}

func (x *QueryIdentityRecordsByAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryIdentityRecordsByAddressRequest.ProtoReflect.Descriptor instead.
func (*QueryIdentityRecordsByAddressRequest) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{16}
}

func (x *QueryIdentityRecordsByAddressRequest) GetCreator() []byte {
	if x != nil {
		return x.Creator
	}
	return nil
}

func (x *QueryIdentityRecordsByAddressRequest) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

type QueryIdentityRecordsByAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*IdentityRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *QueryIdentityRecordsByAddressResponse) Reset() {
	*x = QueryIdentityRecordsByAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryIdentityRecordsByAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryIdentityRecordsByAddressResponse) ProtoMessage() {}

func (x *QueryIdentityRecordsByAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryIdentityRecordsByAddressResponse.ProtoReflect.Descriptor instead.
func (*QueryIdentityRecordsByAddressResponse) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{17}
}

func (x *QueryIdentityRecordsByAddressResponse) GetRecords() []*IdentityRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type QueryAllIdentityRecordsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *base.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryAllIdentityRecordsRequest) Reset() {
	*x = QueryAllIdentityRecordsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllIdentityRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllIdentityRecordsRequest) ProtoMessage() {}

func (x *QueryAllIdentityRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllIdentityRecordsRequest.ProtoReflect.Descriptor instead.
func (*QueryAllIdentityRecordsRequest) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{18}
}

func (x *QueryAllIdentityRecordsRequest) GetPagination() *base.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryAllIdentityRecordsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records    []*IdentityRecord  `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	Pagination *base.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryAllIdentityRecordsResponse) Reset() {
	*x = QueryAllIdentityRecordsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllIdentityRecordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllIdentityRecordsResponse) ProtoMessage() {}

func (x *QueryAllIdentityRecordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllIdentityRecordsResponse.ProtoReflect.Descriptor instead.
func (*QueryAllIdentityRecordsResponse) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{19}
}

func (x *QueryAllIdentityRecordsResponse) GetRecords() []*IdentityRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *QueryAllIdentityRecordsResponse) GetPagination() *base.PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryIdentityVerifyRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId uint64 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *QueryIdentityVerifyRecordRequest) Reset() {
	*x = QueryIdentityVerifyRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryIdentityVerifyRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryIdentityVerifyRecordRequest) ProtoMessage() {}

func (x *QueryIdentityVerifyRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryIdentityVerifyRecordRequest.ProtoReflect.Descriptor instead.
func (*QueryIdentityVerifyRecordRequest) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{20}
}

func (x *QueryIdentityVerifyRecordRequest) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

type QueryIdentityVerifyRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerifyRecord *IdentityRecordsVerify `protobuf:"bytes,1,opt,name=verify_record,json=verifyRecord,proto3" json:"verify_record,omitempty"`
}

func (x *QueryIdentityVerifyRecordResponse) Reset() {
	*x = QueryIdentityVerifyRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryIdentityVerifyRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryIdentityVerifyRecordResponse) ProtoMessage() {}

func (x *QueryIdentityVerifyRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryIdentityVerifyRecordResponse.ProtoReflect.Descriptor instead.
func (*QueryIdentityVerifyRecordResponse) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{21}
}

func (x *QueryIdentityVerifyRecordResponse) GetVerifyRecord() *IdentityRecordsVerify {
	if x != nil {
		return x.VerifyRecord
	}
	return nil
}

type QueryIdentityRecordVerifyRequestsByApprover struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Approver   []byte            `protobuf:"bytes,1,opt,name=approver,proto3" json:"approver,omitempty"`
	Pagination *base.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryIdentityRecordVerifyRequestsByApprover) Reset() {
	*x = QueryIdentityRecordVerifyRequestsByApprover{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryIdentityRecordVerifyRequestsByApprover) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryIdentityRecordVerifyRequestsByApprover) ProtoMessage() {}

func (x *QueryIdentityRecordVerifyRequestsByApprover) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryIdentityRecordVerifyRequestsByApprover.ProtoReflect.Descriptor instead.
func (*QueryIdentityRecordVerifyRequestsByApprover) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{22}
}

func (x *QueryIdentityRecordVerifyRequestsByApprover) GetApprover() []byte {
	if x != nil {
		return x.Approver
	}
	return nil
}

func (x *QueryIdentityRecordVerifyRequestsByApprover) GetPagination() *base.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryIdentityRecordVerifyRequestsByApproverResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerifyRecords []*IdentityRecordsVerify `protobuf:"bytes,1,rep,name=verify_records,json=verifyRecords,proto3" json:"verify_records,omitempty"`
	Pagination    *base.PageResponse       `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryIdentityRecordVerifyRequestsByApproverResponse) Reset() {
	*x = QueryIdentityRecordVerifyRequestsByApproverResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryIdentityRecordVerifyRequestsByApproverResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryIdentityRecordVerifyRequestsByApproverResponse) ProtoMessage() {}

func (x *QueryIdentityRecordVerifyRequestsByApproverResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryIdentityRecordVerifyRequestsByApproverResponse.ProtoReflect.Descriptor instead.
func (*QueryIdentityRecordVerifyRequestsByApproverResponse) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{23}
}

func (x *QueryIdentityRecordVerifyRequestsByApproverResponse) GetVerifyRecords() []*IdentityRecordsVerify {
	if x != nil {
		return x.VerifyRecords
	}
	return nil
}

func (x *QueryIdentityRecordVerifyRequestsByApproverResponse) GetPagination() *base.PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryIdentityRecordVerifyRequestsByRequester struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requester  []byte            `protobuf:"bytes,1,opt,name=requester,proto3" json:"requester,omitempty"`
	Pagination *base.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryIdentityRecordVerifyRequestsByRequester) Reset() {
	*x = QueryIdentityRecordVerifyRequestsByRequester{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryIdentityRecordVerifyRequestsByRequester) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryIdentityRecordVerifyRequestsByRequester) ProtoMessage() {}

func (x *QueryIdentityRecordVerifyRequestsByRequester) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryIdentityRecordVerifyRequestsByRequester.ProtoReflect.Descriptor instead.
func (*QueryIdentityRecordVerifyRequestsByRequester) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{24}
}

func (x *QueryIdentityRecordVerifyRequestsByRequester) GetRequester() []byte {
	if x != nil {
		return x.Requester
	}
	return nil
}

func (x *QueryIdentityRecordVerifyRequestsByRequester) GetPagination() *base.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryIdentityRecordVerifyRequestsByRequesterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerifyRecords []*IdentityRecordsVerify `protobuf:"bytes,1,rep,name=verify_records,json=verifyRecords,proto3" json:"verify_records,omitempty"`
	Pagination    *base.PageResponse       `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryIdentityRecordVerifyRequestsByRequesterResponse) Reset() {
	*x = QueryIdentityRecordVerifyRequestsByRequesterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryIdentityRecordVerifyRequestsByRequesterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryIdentityRecordVerifyRequestsByRequesterResponse) ProtoMessage() {}

func (x *QueryIdentityRecordVerifyRequestsByRequesterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryIdentityRecordVerifyRequestsByRequesterResponse.ProtoReflect.Descriptor instead.
func (*QueryIdentityRecordVerifyRequestsByRequesterResponse) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{25}
}

func (x *QueryIdentityRecordVerifyRequestsByRequesterResponse) GetVerifyRecords() []*IdentityRecordsVerify {
	if x != nil {
		return x.VerifyRecords
	}
	return nil
}

func (x *QueryIdentityRecordVerifyRequestsByRequesterResponse) GetPagination() *base.PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryAllIdentityRecordVerifyRequests struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *base.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryAllIdentityRecordVerifyRequests) Reset() {
	*x = QueryAllIdentityRecordVerifyRequests{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllIdentityRecordVerifyRequests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllIdentityRecordVerifyRequests) ProtoMessage() {}

func (x *QueryAllIdentityRecordVerifyRequests) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllIdentityRecordVerifyRequests.ProtoReflect.Descriptor instead.
func (*QueryAllIdentityRecordVerifyRequests) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{26}
}

func (x *QueryAllIdentityRecordVerifyRequests) GetPagination() *base.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryAllIdentityRecordVerifyRequestsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerifyRecords []*IdentityRecordsVerify `protobuf:"bytes,1,rep,name=verify_records,json=verifyRecords,proto3" json:"verify_records,omitempty"`
	Pagination    *base.PageResponse       `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryAllIdentityRecordVerifyRequestsResponse) Reset() {
	*x = QueryAllIdentityRecordVerifyRequestsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllIdentityRecordVerifyRequestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllIdentityRecordVerifyRequestsResponse) ProtoMessage() {}

func (x *QueryAllIdentityRecordVerifyRequestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllIdentityRecordVerifyRequestsResponse.ProtoReflect.Descriptor instead.
func (*QueryAllIdentityRecordVerifyRequestsResponse) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{27}
}

func (x *QueryAllIdentityRecordVerifyRequestsResponse) GetVerifyRecords() []*IdentityRecordsVerify {
	if x != nil {
		return x.VerifyRecords
	}
	return nil
}

func (x *QueryAllIdentityRecordVerifyRequestsResponse) GetPagination() *base.PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type RoleQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint32       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`  // (integer) - auto assigned
	Sid         string       `protobuf:"bytes,2,opt,name=sid,proto3" json:"sid,omitempty"` // string identifier unique variable name
	Description string       `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Permissions *Permissions `protobuf:"bytes,4,opt,name=permissions,proto3" json:"permissions,omitempty"`
}

func (x *RoleQuery) Reset() {
	*x = RoleQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleQuery) ProtoMessage() {}

func (x *RoleQuery) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleQuery.ProtoReflect.Descriptor instead.
func (*RoleQuery) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{28}
}

func (x *RoleQuery) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RoleQuery) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *RoleQuery) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RoleQuery) GetPermissions() *Permissions {
	if x != nil {
		return x.Permissions
	}
	return nil
}

type AllRolesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AllRolesRequest) Reset() {
	*x = AllRolesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllRolesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllRolesRequest) ProtoMessage() {}

func (x *AllRolesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllRolesRequest.ProtoReflect.Descriptor instead.
func (*AllRolesRequest) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{29}
}

type AllRolesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Roles []*RoleQuery `protobuf:"bytes,1,rep,name=roles,proto3" json:"roles,omitempty"`
}

func (x *AllRolesResponse) Reset() {
	*x = AllRolesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllRolesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllRolesResponse) ProtoMessage() {}

func (x *AllRolesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllRolesResponse.ProtoReflect.Descriptor instead.
func (*AllRolesResponse) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{30}
}

func (x *AllRolesResponse) GetRoles() []*RoleQuery {
	if x != nil {
		return x.Roles
	}
	return nil
}

type RolesByAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValAddr []byte `protobuf:"bytes,1,opt,name=val_addr,json=valAddr,proto3" json:"val_addr,omitempty"`
}

func (x *RolesByAddressRequest) Reset() {
	*x = RolesByAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RolesByAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RolesByAddressRequest) ProtoMessage() {}

func (x *RolesByAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RolesByAddressRequest.ProtoReflect.Descriptor instead.
func (*RolesByAddressRequest) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{31}
}

func (x *RolesByAddressRequest) GetValAddr() []byte {
	if x != nil {
		return x.ValAddr
	}
	return nil
}

type RolesByAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleIds []uint64 `protobuf:"varint,1,rep,packed,name=roleIds,proto3" json:"roleIds,omitempty"`
}

func (x *RolesByAddressResponse) Reset() {
	*x = RolesByAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RolesByAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RolesByAddressResponse) ProtoMessage() {}

func (x *RolesByAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RolesByAddressResponse.ProtoReflect.Descriptor instead.
func (*RolesByAddressResponse) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{32}
}

func (x *RolesByAddressResponse) GetRoleIds() []uint64 {
	if x != nil {
		return x.RoleIds
	}
	return nil
}

type PermissionsByAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValAddr []byte `protobuf:"bytes,1,opt,name=val_addr,json=valAddr,proto3" json:"val_addr,omitempty"`
}

func (x *PermissionsByAddressRequest) Reset() {
	*x = PermissionsByAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionsByAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionsByAddressRequest) ProtoMessage() {}

func (x *PermissionsByAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionsByAddressRequest.ProtoReflect.Descriptor instead.
func (*PermissionsByAddressRequest) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{33}
}

func (x *PermissionsByAddressRequest) GetValAddr() []byte {
	if x != nil {
		return x.ValAddr
	}
	return nil
}

type PermissionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Permissions *Permissions `protobuf:"bytes,1,opt,name=permissions,proto3" json:"permissions,omitempty"`
}

func (x *PermissionsResponse) Reset() {
	*x = PermissionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionsResponse) ProtoMessage() {}

func (x *PermissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionsResponse.ProtoReflect.Descriptor instead.
func (*PermissionsResponse) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{34}
}

func (x *PermissionsResponse) GetPermissions() *Permissions {
	if x != nil {
		return x.Permissions
	}
	return nil
}

type ExecutionFeeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ExecutionFeeRequest) Reset() {
	*x = ExecutionFeeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionFeeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionFeeRequest) ProtoMessage() {}

func (x *ExecutionFeeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionFeeRequest.ProtoReflect.Descriptor instead.
func (*ExecutionFeeRequest) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{35}
}

func (x *ExecutionFeeRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ExecutionFeeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fee *ExecutionFee `protobuf:"bytes,1,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (x *ExecutionFeeResponse) Reset() {
	*x = ExecutionFeeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionFeeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionFeeResponse) ProtoMessage() {}

func (x *ExecutionFeeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionFeeResponse.ProtoReflect.Descriptor instead.
func (*ExecutionFeeResponse) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{36}
}

func (x *ExecutionFeeResponse) GetFee() *ExecutionFee {
	if x != nil {
		return x.Fee
	}
	return nil
}

type AllExecutionFeesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AllExecutionFeesRequest) Reset() {
	*x = AllExecutionFeesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllExecutionFeesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllExecutionFeesRequest) ProtoMessage() {}

func (x *AllExecutionFeesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllExecutionFeesRequest.ProtoReflect.Descriptor instead.
func (*AllExecutionFeesRequest) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{37}
}

type AllExecutionFeesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fees []*ExecutionFee `protobuf:"bytes,1,rep,name=fees,proto3" json:"fees,omitempty"`
}

func (x *AllExecutionFeesResponse) Reset() {
	*x = AllExecutionFeesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllExecutionFeesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllExecutionFeesResponse) ProtoMessage() {}

func (x *AllExecutionFeesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllExecutionFeesResponse.ProtoReflect.Descriptor instead.
func (*AllExecutionFeesResponse) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{38}
}

func (x *AllExecutionFeesResponse) GetFees() []*ExecutionFee {
	if x != nil {
		return x.Fees
	}
	return nil
}

var File_kira_gov_query_proto protoreflect.FileDescriptor

var file_kira_gov_query_proto_rawDesc = []byte{
	0x0a, 0x14, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14,
	0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e,
	0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x62, 0x61, 0x73,
	0x65, 0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x6b, 0x69, 0x72, 0x61, 0x2f,
	0x67, 0x6f, 0x76, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x6b, 0x69,
	0x72, 0x61, 0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x21, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x67, 0x6f, 0x76, 0x2f,
	0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x6b, 0x69, 0x72, 0x61,
	0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66,
	0x65, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x37, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x49,
	0x64, 0x22, 0x4d, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6b,
	0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x22, 0x9d, 0x01, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x6f,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x72,
	0x12, 0x38, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6c,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72,
	0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x3a, 0x08, 0x88, 0xa0, 0x1f, 0x00, 0xe8, 0xa0, 0x1f, 0x00,
	0x22, 0x8b, 0x01, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x59,
	0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x38, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6f, 0x0a, 0x1e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4b,
	0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b,
	0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12,
	0x39, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2d, 0x0a, 0x19, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x4d, 0x0a, 0x1a, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x48, 0x0a, 0x25, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x49, 0x64, 0x22, 0x5e, 0x0a, 0x26, 0x51, 0x75, 0x65, 0x72, 0x79, 0x57, 0x68, 0x69, 0x74, 0x65,
	0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x56, 0x6f,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x06,
	0x76, 0x6f, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b,
	0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41,
	0x63, 0x74, 0x6f, 0x72, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x06, 0x76, 0x6f, 0x74, 0x65,
	0x72, 0x73, 0x22, 0x34, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x6f, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x40, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a,
	0x0a, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x42, 0x04, 0xc8,
	0xde, 0x1f, 0x00, 0x52, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x1a, 0x0a, 0x18, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x58, 0x0a, 0x19, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67,
	0x6f, 0x76, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x22, 0x2c, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4f,
	0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a,
	0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22,
	0x99, 0x01, 0x0a, 0x24, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x43, 0xf2, 0xde, 0x1f, 0x0e, 0x79,
	0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xfa, 0xde, 0x1f,
	0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x61, 0x0a, 0x25, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42,
	0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x94,
	0x01, 0x0a, 0x1e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x72, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42,
	0x38, 0xfa, 0xde, 0x1f, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64,
	0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd1, 0x01, 0x0a, 0x1f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41,
	0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x69, 0x72,
	0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x12, 0x74, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x39, 0xfa, 0xde, 0x1f, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x41, 0x0a, 0x20, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x21,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x44, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e,
	0x67, 0x6f, 0x76, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x83, 0x02, 0x0a, 0x2b, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x42, 0x79, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x60, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x44, 0xf2, 0xde, 0x1f, 0x0f, 0x79,
	0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x22, 0xfa, 0xde,
	0x1f, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x72, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x38, 0xfa, 0xde, 0x1f, 0x34, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf9, 0x01,
	0x0a, 0x33, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x42, 0x04,
	0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x12, 0x74, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x39, 0xfa, 0xde, 0x1f, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x87, 0x02, 0x0a, 0x2c, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x42,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x63, 0x0a, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x45, 0xf2,
	0xde, 0x1f, 0x10, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x72, 0x22, 0xfa, 0xde, 0x1f, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d,
	0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x72, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x38, 0xfa,
	0xde, 0x1f, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xfa, 0x01, 0x0a, 0x34, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x42, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0e,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0d, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x74, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x39, 0xfa, 0xde, 0x1f, 0x35, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x9a, 0x01, 0x0a, 0x24, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x72, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x38, 0xfa, 0xde, 0x1f, 0x34, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf2, 0x01,
	0x0a, 0x2c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c,
	0x0a, 0x0e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f,
	0x76, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0d, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x74, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x39, 0xfa, 0xde, 0x1f,
	0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x88, 0x01, 0x0a, 0x09, 0x52, 0x6f, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73,
	0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6b, 0x69, 0x72, 0x61,
	0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x11, 0x0a,
	0x0f, 0x41, 0x6c, 0x6c, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x43, 0x0a, 0x10, 0x41, 0x6c, 0x6c, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x52,
	0x6f, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x05,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0x22, 0x32, 0x0a, 0x15, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x42, 0x79,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x76, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x76, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x22, 0x32, 0x0a, 0x16, 0x52, 0x6f, 0x6c,
	0x65, 0x73, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x22, 0x38, 0x0a,
	0x1b, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x76, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x76, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x22, 0x4e, 0x0a, 0x13, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37,
	0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x2f, 0x0a, 0x13, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x40, 0x0a, 0x14, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x28, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x65, 0x65, 0x52, 0x03, 0x66, 0x65, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x41, 0x6c,
	0x6c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x46, 0x0a, 0x18, 0x41, 0x6c, 0x6c, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2a, 0x0a, 0x04, 0x66, 0x65, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x52, 0x04, 0x66, 0x65, 0x65, 0x73, 0x32, 0xbc, 0x1a,
	0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0xa5, 0x01, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x12, 0x1e, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x58, 0x92, 0x41, 0x28, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x20, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x1a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x20, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6b,
	0x69, 0x72, 0x61, 0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x12,
	0x9c, 0x01, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x12, 0x1f, 0x2e,
	0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x4c, 0x92, 0x41, 0x2a, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x0f, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x20, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x1a, 0x10, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x20, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x2e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6b, 0x69, 0x72, 0x61,
	0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x12, 0xcf,
	0x01, 0x0a, 0x14, 0x41, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x27, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67,
	0x6f, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4b, 0x65,
	0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x64, 0x92, 0x41, 0x42, 0x0a,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x20, 0x41, 0x6c,
	0x6c, 0x20, 0x44, 0x61, 0x74, 0x61, 0x20, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x20, 0x4b, 0x65, 0x79, 0x73, 0x1a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x20, 0x44, 0x61, 0x74,
	0x61, 0x20, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x4b, 0x65, 0x79, 0x73,
	0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6b, 0x69,
	0x72, 0x61, 0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x73,
	0x12, 0xb7, 0x01, 0x0a, 0x12, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67,
	0x6f, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6b,
	0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x56, 0x92, 0x41, 0x33, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x13,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x20, 0x44, 0x61, 0x74, 0x61, 0x20, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x6e, 0x63, 0x65, 0x1a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x20, 0x44, 0x61, 0x74, 0x61, 0x20,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a,
	0x12, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x67, 0x6f, 0x76, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x2f, 0x7b, 0x6b, 0x65, 0x79, 0x7d, 0x12, 0xaa, 0x02, 0x0a, 0x19, 0x57,
	0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2f, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e,
	0x67, 0x6f, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x56, 0x6f, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6b, 0x69, 0x72, 0x61,
	0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c,
	0x69, 0x73, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x56, 0x6f, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa9, 0x01, 0x92, 0x41,
	0x7c, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x38, 0x51, 0x75, 0x65, 0x72, 0x79, 0x20,
	0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x20, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x20, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x73, 0x20, 0x62, 0x79, 0x20, 0x61,
	0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f,
	0x69, 0x64, 0x1a, 0x39, 0x51, 0x75, 0x65, 0x72, 0x79, 0x20, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c,
	0x69, 0x73, 0x74, 0x65, 0x64, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x20, 0x76,
	0x6f, 0x74, 0x65, 0x72, 0x73, 0x20, 0x62, 0x79, 0x20, 0x61, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e,
	0x20, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x2e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x67,
	0x6f, 0x76, 0x2f, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xd3, 0x01, 0x0a, 0x05, 0x56, 0x6f, 0x74, 0x65,
	0x73, 0x12, 0x1b, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56,
	0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8e, 0x01, 0x92,
	0x41, 0x62, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2b, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x20, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x20, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x20,
	0x62, 0x79, 0x20, 0x61, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x1a, 0x2c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x20, 0x70, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x20, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x20, 0x62, 0x79, 0x20,
	0x61, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x5f, 0x69, 0x64, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xc5, 0x01,
	0x0a, 0x11, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67,
	0x6f, 0x76, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x67, 0x92, 0x41,
	0x3c, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x20,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x1a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x20, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x67,
	0x6f, 0x76, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x0e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x24, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e,
	0x67, 0x6f, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x12, 0xad, 0x01, 0x0a, 0x18, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e,
	0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x42, 0x79,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f,
	0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x42, 0x79,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6b, 0x69,
	0x72, 0x61, 0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2f, 0x7b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x7d, 0x12, 0x95, 0x01, 0x0a, 0x12, 0x41, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x28, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e,
	0x67, 0x6f, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6b, 0x69, 0x72, 0x61,
	0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0xb1, 0x01, 0x0a, 0x1b, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x2e, 0x6b, 0x69, 0x72, 0x61,
	0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x12, 0x31, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2f, 0x7b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xea, 0x01,
	0x0a, 0x27, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x42, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x36, 0x2e, 0x6b, 0x69, 0x72, 0x61,
	0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x42, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x72, 0x1a, 0x3e, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x42, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x47, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x12, 0x3f, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x6b, 0x69, 0x72, 0x61, 0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x5f, 0x62, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x7b,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x7d, 0x12, 0xe5, 0x01, 0x0a, 0x26, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x35, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x1a, 0x3d, 0x2e, 0x6b,
	0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x3f, 0x12, 0x3d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x67,
	0x6f, 0x76, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2f, 0x7b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x72, 0x7d, 0x12, 0xbd, 0x01, 0x0a, 0x1f, 0x41, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x2e, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f,
	0x76, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x1a, 0x36, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f,
	0x76, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6b, 0x69, 0x72,
	0x61, 0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x12, 0x62, 0x0a, 0x08, 0x41, 0x6c, 0x6c, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x19,
	0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x41, 0x6c, 0x6c, 0x52, 0x6f, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6b, 0x69, 0x72, 0x61,
	0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x41, 0x6c, 0x6c, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x61, 0x6c, 0x6c,
	0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x86, 0x01, 0x0a, 0x0e, 0x52, 0x6f, 0x6c, 0x65, 0x73,
	0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x2e, 0x6b, 0x69, 0x72, 0x61,
	0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6b, 0x69, 0x72,
	0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6b, 0x69, 0x72, 0x61, 0x2f,
	0x67, 0x6f, 0x76, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x2f, 0x7b, 0x76, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x7d, 0x12,
	0x95, 0x01, 0x0a, 0x14, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42,
	0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e,
	0x67, 0x6f, 0x76, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42,
	0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x12, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6b, 0x69, 0x72,
	0x61, 0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x62, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x7b, 0x76, 0x61,
	0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x7d, 0x12, 0x72, 0x0a, 0x0c, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x1d, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67,
	0x6f, 0x76, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f,
	0x76, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x12, 0x7f, 0x0a, 0x10, 0x41,
	0x6c, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x73, 0x12,
	0x21, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x41, 0x6c, 0x6c, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x41, 0x6c,
	0x6c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x42, 0x70, 0x5a, 0x2d,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4b, 0x69, 0x72, 0x61, 0x43,
	0x6f, 0x72, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x78, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2d, 0x67, 0x65, 0x6e, 0x2f, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x67, 0x6f, 0x76, 0x92, 0x41, 0x3e,
	0x12, 0x05, 0x32, 0x03, 0x31, 0x2e, 0x30, 0x2a, 0x01, 0x01, 0x72, 0x32, 0x0a, 0x0c, 0x67, 0x52,
	0x50, 0x43, 0x2d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x22, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4b,
	0x69, 0x72, 0x61, 0x43, 0x6f, 0x72, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x78, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kira_gov_query_proto_rawDescOnce sync.Once
	file_kira_gov_query_proto_rawDescData = file_kira_gov_query_proto_rawDesc
)

func file_kira_gov_query_proto_rawDescGZIP() []byte {
	file_kira_gov_query_proto_rawDescOnce.Do(func() {
		file_kira_gov_query_proto_rawDescData = protoimpl.X.CompressGZIP(file_kira_gov_query_proto_rawDescData)
	})
	return file_kira_gov_query_proto_rawDescData
}

var file_kira_gov_query_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_kira_gov_query_proto_goTypes = []interface{}{
	(*QueryProposalRequest)(nil),                                 // 0: kira.gov.QueryProposalRequest
	(*QueryProposalResponse)(nil),                                // 1: kira.gov.QueryProposalResponse
	(*QueryProposalsRequest)(nil),                                // 2: kira.gov.QueryProposalsRequest
	(*QueryProposalsResponse)(nil),                               // 3: kira.gov.QueryProposalsResponse
	(*QueryDataReferenceKeysRequest)(nil),                        // 4: kira.gov.QueryDataReferenceKeysRequest
	(*QueryDataReferenceKeysResponse)(nil),                       // 5: kira.gov.QueryDataReferenceKeysResponse
	(*QueryDataReferenceRequest)(nil),                            // 6: kira.gov.QueryDataReferenceRequest
	(*QueryDataReferenceResponse)(nil),                           // 7: kira.gov.QueryDataReferenceResponse
	(*QueryWhitelistedProposalVotersRequest)(nil),                // 8: kira.gov.QueryWhitelistedProposalVotersRequest
	(*QueryWhitelistedProposalVotersResponse)(nil),               // 9: kira.gov.QueryWhitelistedProposalVotersResponse
	(*QueryVotesRequest)(nil),                                    // 10: kira.gov.QueryVotesRequest
	(*QueryVotesResponse)(nil),                                   // 11: kira.gov.QueryVotesResponse
	(*NetworkPropertiesRequest)(nil),                             // 12: kira.gov.NetworkPropertiesRequest
	(*NetworkPropertiesResponse)(nil),                            // 13: kira.gov.NetworkPropertiesResponse
	(*QueryIdentityRecordRequest)(nil),                           // 14: kira.gov.QueryIdentityRecordRequest
	(*QueryIdentityRecordResponse)(nil),                          // 15: kira.gov.QueryIdentityRecordResponse
	(*QueryIdentityRecordsByAddressRequest)(nil),                 // 16: kira.gov.QueryIdentityRecordsByAddressRequest
	(*QueryIdentityRecordsByAddressResponse)(nil),                // 17: kira.gov.QueryIdentityRecordsByAddressResponse
	(*QueryAllIdentityRecordsRequest)(nil),                       // 18: kira.gov.QueryAllIdentityRecordsRequest
	(*QueryAllIdentityRecordsResponse)(nil),                      // 19: kira.gov.QueryAllIdentityRecordsResponse
	(*QueryIdentityVerifyRecordRequest)(nil),                     // 20: kira.gov.QueryIdentityVerifyRecordRequest
	(*QueryIdentityVerifyRecordResponse)(nil),                    // 21: kira.gov.QueryIdentityVerifyRecordResponse
	(*QueryIdentityRecordVerifyRequestsByApprover)(nil),          // 22: kira.gov.QueryIdentityRecordVerifyRequestsByApprover
	(*QueryIdentityRecordVerifyRequestsByApproverResponse)(nil),  // 23: kira.gov.QueryIdentityRecordVerifyRequestsByApproverResponse
	(*QueryIdentityRecordVerifyRequestsByRequester)(nil),         // 24: kira.gov.QueryIdentityRecordVerifyRequestsByRequester
	(*QueryIdentityRecordVerifyRequestsByRequesterResponse)(nil), // 25: kira.gov.QueryIdentityRecordVerifyRequestsByRequesterResponse
	(*QueryAllIdentityRecordVerifyRequests)(nil),                 // 26: kira.gov.QueryAllIdentityRecordVerifyRequests
	(*QueryAllIdentityRecordVerifyRequestsResponse)(nil),         // 27: kira.gov.QueryAllIdentityRecordVerifyRequestsResponse
	(*RoleQuery)(nil),                                            // 28: kira.gov.RoleQuery
	(*AllRolesRequest)(nil),                                      // 29: kira.gov.AllRolesRequest
	(*AllRolesResponse)(nil),                                     // 30: kira.gov.AllRolesResponse
	(*RolesByAddressRequest)(nil),                                // 31: kira.gov.RolesByAddressRequest
	(*RolesByAddressResponse)(nil),                               // 32: kira.gov.RolesByAddressResponse
	(*PermissionsByAddressRequest)(nil),                          // 33: kira.gov.PermissionsByAddressRequest
	(*PermissionsResponse)(nil),                                  // 34: kira.gov.PermissionsResponse
	(*ExecutionFeeRequest)(nil),                                  // 35: kira.gov.ExecutionFeeRequest
	(*ExecutionFeeResponse)(nil),                                 // 36: kira.gov.ExecutionFeeResponse
	(*AllExecutionFeesRequest)(nil),                              // 37: kira.gov.AllExecutionFeesRequest
	(*AllExecutionFeesResponse)(nil),                             // 38: kira.gov.AllExecutionFeesResponse
	(*Proposal)(nil),                                             // 39: kira.gov.Proposal
	(*base.PageRequest)(nil),                                     // 40: cosmos.base.PageRequest
	(*base.PageResponse)(nil),                                    // 41: cosmos.base.PageResponse
	(*DataRegistryEntry)(nil),                                    // 42: kira.gov.DataRegistryEntry
	(*NetworkActor)(nil),                                         // 43: kira.gov.NetworkActor
	(*Vote)(nil),                                                 // 44: kira.gov.Vote
	(*NetworkProperties)(nil),                                    // 45: kira.gov.NetworkProperties
	(*IdentityRecord)(nil),                                       // 46: kira.gov.IdentityRecord
	(*IdentityRecordsVerify)(nil),                                // 47: kira.gov.IdentityRecordsVerify
	(*Permissions)(nil),                                          // 48: kira.gov.Permissions
	(*ExecutionFee)(nil),                                         // 49: kira.gov.ExecutionFee
}
var file_kira_gov_query_proto_depIdxs = []int32{
	39, // 0: kira.gov.QueryProposalResponse.proposal:type_name -> kira.gov.Proposal
	40, // 1: kira.gov.QueryProposalsRequest.pagination:type_name -> cosmos.base.PageRequest
	39, // 2: kira.gov.QueryProposalsResponse.proposals:type_name -> kira.gov.Proposal
	41, // 3: kira.gov.QueryProposalsResponse.pagination:type_name -> cosmos.base.PageResponse
	40, // 4: kira.gov.QueryDataReferenceKeysRequest.pagination:type_name -> cosmos.base.PageRequest
	41, // 5: kira.gov.QueryDataReferenceKeysResponse.pagination:type_name -> cosmos.base.PageResponse
	42, // 6: kira.gov.QueryDataReferenceResponse.data:type_name -> kira.gov.DataRegistryEntry
	43, // 7: kira.gov.QueryWhitelistedProposalVotersResponse.voters:type_name -> kira.gov.NetworkActor
	44, // 8: kira.gov.QueryVotesResponse.votes:type_name -> kira.gov.Vote
	45, // 9: kira.gov.NetworkPropertiesResponse.properties:type_name -> kira.gov.NetworkProperties
	46, // 10: kira.gov.QueryIdentityRecordResponse.record:type_name -> kira.gov.IdentityRecord
	46, // 11: kira.gov.QueryIdentityRecordsByAddressResponse.records:type_name -> kira.gov.IdentityRecord
	40, // 12: kira.gov.QueryAllIdentityRecordsRequest.pagination:type_name -> cosmos.base.PageRequest
	46, // 13: kira.gov.QueryAllIdentityRecordsResponse.records:type_name -> kira.gov.IdentityRecord
	41, // 14: kira.gov.QueryAllIdentityRecordsResponse.pagination:type_name -> cosmos.base.PageResponse
	47, // 15: kira.gov.QueryIdentityVerifyRecordResponse.verify_record:type_name -> kira.gov.IdentityRecordsVerify
	40, // 16: kira.gov.QueryIdentityRecordVerifyRequestsByApprover.pagination:type_name -> cosmos.base.PageRequest
	47, // 17: kira.gov.QueryIdentityRecordVerifyRequestsByApproverResponse.verify_records:type_name -> kira.gov.IdentityRecordsVerify
	41, // 18: kira.gov.QueryIdentityRecordVerifyRequestsByApproverResponse.pagination:type_name -> cosmos.base.PageResponse
	40, // 19: kira.gov.QueryIdentityRecordVerifyRequestsByRequester.pagination:type_name -> cosmos.base.PageRequest
	47, // 20: kira.gov.QueryIdentityRecordVerifyRequestsByRequesterResponse.verify_records:type_name -> kira.gov.IdentityRecordsVerify
	41, // 21: kira.gov.QueryIdentityRecordVerifyRequestsByRequesterResponse.pagination:type_name -> cosmos.base.PageResponse
	40, // 22: kira.gov.QueryAllIdentityRecordVerifyRequests.pagination:type_name -> cosmos.base.PageRequest
	47, // 23: kira.gov.QueryAllIdentityRecordVerifyRequestsResponse.verify_records:type_name -> kira.gov.IdentityRecordsVerify
	41, // 24: kira.gov.QueryAllIdentityRecordVerifyRequestsResponse.pagination:type_name -> cosmos.base.PageResponse
	48, // 25: kira.gov.RoleQuery.permissions:type_name -> kira.gov.Permissions
	28, // 26: kira.gov.AllRolesResponse.roles:type_name -> kira.gov.RoleQuery
	48, // 27: kira.gov.PermissionsResponse.permissions:type_name -> kira.gov.Permissions
	49, // 28: kira.gov.ExecutionFeeResponse.fee:type_name -> kira.gov.ExecutionFee
	49, // 29: kira.gov.AllExecutionFeesResponse.fees:type_name -> kira.gov.ExecutionFee
	0,  // 30: kira.gov.Query.Proposal:input_type -> kira.gov.QueryProposalRequest
	2,  // 31: kira.gov.Query.Proposals:input_type -> kira.gov.QueryProposalsRequest
	4,  // 32: kira.gov.Query.AllDataReferenceKeys:input_type -> kira.gov.QueryDataReferenceKeysRequest
	6,  // 33: kira.gov.Query.DataReferenceByKey:input_type -> kira.gov.QueryDataReferenceRequest
	8,  // 34: kira.gov.Query.WhitelistedProposalVoters:input_type -> kira.gov.QueryWhitelistedProposalVotersRequest
	10, // 35: kira.gov.Query.Votes:input_type -> kira.gov.QueryVotesRequest
	12, // 36: kira.gov.Query.NetworkProperties:input_type -> kira.gov.NetworkPropertiesRequest
	14, // 37: kira.gov.Query.IdentityRecord:input_type -> kira.gov.QueryIdentityRecordRequest
	16, // 38: kira.gov.Query.IdentityRecordsByAddress:input_type -> kira.gov.QueryIdentityRecordsByAddressRequest
	18, // 39: kira.gov.Query.AllIdentityRecords:input_type -> kira.gov.QueryAllIdentityRecordsRequest
	20, // 40: kira.gov.Query.IdentityRecordVerifyRequest:input_type -> kira.gov.QueryIdentityVerifyRecordRequest
	24, // 41: kira.gov.Query.IdentityRecordVerifyRequestsByRequester:input_type -> kira.gov.QueryIdentityRecordVerifyRequestsByRequester
	22, // 42: kira.gov.Query.IdentityRecordVerifyRequestsByApprover:input_type -> kira.gov.QueryIdentityRecordVerifyRequestsByApprover
	26, // 43: kira.gov.Query.AllIdentityRecordVerifyRequests:input_type -> kira.gov.QueryAllIdentityRecordVerifyRequests
	29, // 44: kira.gov.Query.AllRoles:input_type -> kira.gov.AllRolesRequest
	31, // 45: kira.gov.Query.RolesByAddress:input_type -> kira.gov.RolesByAddressRequest
	33, // 46: kira.gov.Query.PermissionsByAddress:input_type -> kira.gov.PermissionsByAddressRequest
	35, // 47: kira.gov.Query.ExecutionFee:input_type -> kira.gov.ExecutionFeeRequest
	37, // 48: kira.gov.Query.AllExecutionFees:input_type -> kira.gov.AllExecutionFeesRequest
	1,  // 49: kira.gov.Query.Proposal:output_type -> kira.gov.QueryProposalResponse
	3,  // 50: kira.gov.Query.Proposals:output_type -> kira.gov.QueryProposalsResponse
	5,  // 51: kira.gov.Query.AllDataReferenceKeys:output_type -> kira.gov.QueryDataReferenceKeysResponse
	7,  // 52: kira.gov.Query.DataReferenceByKey:output_type -> kira.gov.QueryDataReferenceResponse
	9,  // 53: kira.gov.Query.WhitelistedProposalVoters:output_type -> kira.gov.QueryWhitelistedProposalVotersResponse
	11, // 54: kira.gov.Query.Votes:output_type -> kira.gov.QueryVotesResponse
	13, // 55: kira.gov.Query.NetworkProperties:output_type -> kira.gov.NetworkPropertiesResponse
	15, // 56: kira.gov.Query.IdentityRecord:output_type -> kira.gov.QueryIdentityRecordResponse
	17, // 57: kira.gov.Query.IdentityRecordsByAddress:output_type -> kira.gov.QueryIdentityRecordsByAddressResponse
	19, // 58: kira.gov.Query.AllIdentityRecords:output_type -> kira.gov.QueryAllIdentityRecordsResponse
	21, // 59: kira.gov.Query.IdentityRecordVerifyRequest:output_type -> kira.gov.QueryIdentityVerifyRecordResponse
	25, // 60: kira.gov.Query.IdentityRecordVerifyRequestsByRequester:output_type -> kira.gov.QueryIdentityRecordVerifyRequestsByRequesterResponse
	23, // 61: kira.gov.Query.IdentityRecordVerifyRequestsByApprover:output_type -> kira.gov.QueryIdentityRecordVerifyRequestsByApproverResponse
	27, // 62: kira.gov.Query.AllIdentityRecordVerifyRequests:output_type -> kira.gov.QueryAllIdentityRecordVerifyRequestsResponse
	30, // 63: kira.gov.Query.AllRoles:output_type -> kira.gov.AllRolesResponse
	32, // 64: kira.gov.Query.RolesByAddress:output_type -> kira.gov.RolesByAddressResponse
	34, // 65: kira.gov.Query.PermissionsByAddress:output_type -> kira.gov.PermissionsResponse
	36, // 66: kira.gov.Query.ExecutionFee:output_type -> kira.gov.ExecutionFeeResponse
	38, // 67: kira.gov.Query.AllExecutionFees:output_type -> kira.gov.AllExecutionFeesResponse
	49, // [49:68] is the sub-list for method output_type
	30, // [30:49] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_kira_gov_query_proto_init() }
func file_kira_gov_query_proto_init() {
	if File_kira_gov_query_proto != nil {
		return
	}
	file_kira_gov_data_registry_proto_init()
	file_kira_gov_proposal_proto_init()
	file_kira_gov_identity_registrar_proto_init()
	file_kira_gov_actor_proto_init()
	file_kira_gov_network_properties_proto_init()
	file_kira_gov_role_proto_init()
	file_kira_gov_execution_fee_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_kira_gov_query_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProposalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProposalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProposalsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProposalsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDataReferenceKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDataReferenceKeysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDataReferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDataReferenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryWhitelistedProposalVotersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryWhitelistedProposalVotersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryVotesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryVotesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkPropertiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkPropertiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryIdentityRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryIdentityRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryIdentityRecordsByAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryIdentityRecordsByAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllIdentityRecordsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllIdentityRecordsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryIdentityVerifyRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryIdentityVerifyRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryIdentityRecordVerifyRequestsByApprover); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryIdentityRecordVerifyRequestsByApproverResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryIdentityRecordVerifyRequestsByRequester); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryIdentityRecordVerifyRequestsByRequesterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllIdentityRecordVerifyRequests); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllIdentityRecordVerifyRequestsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllRolesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllRolesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RolesByAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RolesByAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionsByAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionFeeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionFeeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllExecutionFeesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllExecutionFeesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kira_gov_query_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kira_gov_query_proto_goTypes,
		DependencyIndexes: file_kira_gov_query_proto_depIdxs,
		MessageInfos:      file_kira_gov_query_proto_msgTypes,
	}.Build()
	File_kira_gov_query_proto = out.File
	file_kira_gov_query_proto_rawDesc = nil
	file_kira_gov_query_proto_goTypes = nil
	file_kira_gov_query_proto_depIdxs = nil
}
