// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: kira/gov/tx.proto

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// SubmitProposal defines a method to create new proposal given a content.
	SubmitProposal(ctx context.Context, in *MsgSubmitProposal, opts ...grpc.CallOption) (*MsgSubmitProposalResponse, error)
	// WhitelistPermissions defines a method for whitelisting a permission for an address.
	WhitelistPermissions(ctx context.Context, in *MsgWhitelistPermissions, opts ...grpc.CallOption) (*MsgWhitelistPermissionsResponse, error)
	// WhitelistPermissions defines a method for removing whitelisted permission for an address.
	RemoveWhitelistedPermissions(ctx context.Context, in *MsgRemoveWhitelistedPermissions, opts ...grpc.CallOption) (*MsgRemoveWhitelistedPermissionsResponse, error)
	// BlacklistPermissions defines a method for blacklisting a permission for an address.
	BlacklistPermissions(ctx context.Context, in *MsgBlacklistPermissions, opts ...grpc.CallOption) (*MsgBlacklistPermissionsResponse, error)
	// RemoveBlacklistedPermissions defines a method for removing a blacklisted permission for an address.
	RemoveBlacklistedPermissions(ctx context.Context, in *MsgRemoveBlacklistedPermissions, opts ...grpc.CallOption) (*MsgRemoveBlacklistedPermissionsResponse, error)
	// ClaimCouncilor defines a method for claiming a councilor
	ClaimCouncilor(ctx context.Context, in *MsgClaimCouncilor, opts ...grpc.CallOption) (*MsgClaimCouncilorResponse, error)
	// VoteProposal defines a method for voting a proposal
	VoteProposal(ctx context.Context, in *MsgVoteProposal, opts ...grpc.CallOption) (*MsgVoteProposalResponse, error)
	// CreateRole defines a method for creating a role
	CreateRole(ctx context.Context, in *MsgCreateRole, opts ...grpc.CallOption) (*MsgCreateRoleResponse, error)
	// AssignRole defines a method for assigning a role to an address
	AssignRole(ctx context.Context, in *MsgAssignRole, opts ...grpc.CallOption) (*MsgAssignRoleResponse, error)
	// RemoveRole defines a method for removing a role from an address
	RemoveRole(ctx context.Context, in *MsgRemoveRole, opts ...grpc.CallOption) (*MsgRemoveRoleResponse, error)
	// SetNetworkProperties defines a method for setting network properties
	SetNetworkProperties(ctx context.Context, in *MsgSetNetworkProperties, opts ...grpc.CallOption) (*MsgSetNetworkPropertiesResponse, error)
	// SetExecutionFee defines a method for setting execution fee
	SetExecutionFee(ctx context.Context, in *MsgSetExecutionFee, opts ...grpc.CallOption) (*MsgSetExecutionFeeResponse, error)
	// WhitelistRolePermission defines a method for whitelisting a permission for a role
	WhitelistRolePermission(ctx context.Context, in *MsgWhitelistRolePermission, opts ...grpc.CallOption) (*MsgWhitelistRolePermissionResponse, error)
	// BlacklistRolePermission defines a method for blacklisting a permission for a role
	BlacklistRolePermission(ctx context.Context, in *MsgBlacklistRolePermission, opts ...grpc.CallOption) (*MsgBlacklistRolePermissionResponse, error)
	// RemoveWhitelistRolePermission defines a method for removing whitelisted permission from a role
	RemoveWhitelistRolePermission(ctx context.Context, in *MsgRemoveWhitelistRolePermission, opts ...grpc.CallOption) (*MsgRemoveWhitelistRolePermissionResponse, error)
	// RemoveBlacklistRolePermission defines a method for removing blacklisted permission from a role
	RemoveBlacklistRolePermission(ctx context.Context, in *MsgRemoveBlacklistRolePermission, opts ...grpc.CallOption) (*MsgRemoveBlacklistRolePermissionResponse, error)
	// RegisterIdentityRecord defines a method to create identity records for an address
	RegisterIdentityRecords(ctx context.Context, in *MsgRegisterIdentityRecords, opts ...grpc.CallOption) (*MsgRegisterIdentityRecordsResponse, error)
	// DeleteIdentityRecords defines a method to delete identity records
	DeleteIdentityRecords(ctx context.Context, in *MsgDeleteIdentityRecords, opts ...grpc.CallOption) (*MsgDeleteIdentityRecordsResponse, error)
	// RequestIdentityRecordsVerify defines a method to request verify request from specific verifier
	RequestIdentityRecordsVerify(ctx context.Context, in *MsgRequestIdentityRecordsVerify, opts ...grpc.CallOption) (*MsgRequestIdentityRecordsVerifyResponse, error)
	// HandleIdentityRecordsVerifyRequest defines a method to accept or reject verification request
	HandleIdentityRecordsVerifyRequest(ctx context.Context, in *MsgHandleIdentityRecordsVerifyRequest, opts ...grpc.CallOption) (*MsgHandleIdentityRecordsVerifyResponse, error)
	// CancelIdentityRecordsVerifyRequest defines a method to cancel verification request
	CancelIdentityRecordsVerifyRequest(ctx context.Context, in *MsgCancelIdentityRecordsVerifyRequest, opts ...grpc.CallOption) (*MsgCancelIdentityRecordsVerifyRequestResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) SubmitProposal(ctx context.Context, in *MsgSubmitProposal, opts ...grpc.CallOption) (*MsgSubmitProposalResponse, error) {
	out := new(MsgSubmitProposalResponse)
	err := c.cc.Invoke(ctx, "/kira.gov.Msg/SubmitProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WhitelistPermissions(ctx context.Context, in *MsgWhitelistPermissions, opts ...grpc.CallOption) (*MsgWhitelistPermissionsResponse, error) {
	out := new(MsgWhitelistPermissionsResponse)
	err := c.cc.Invoke(ctx, "/kira.gov.Msg/WhitelistPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveWhitelistedPermissions(ctx context.Context, in *MsgRemoveWhitelistedPermissions, opts ...grpc.CallOption) (*MsgRemoveWhitelistedPermissionsResponse, error) {
	out := new(MsgRemoveWhitelistedPermissionsResponse)
	err := c.cc.Invoke(ctx, "/kira.gov.Msg/RemoveWhitelistedPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BlacklistPermissions(ctx context.Context, in *MsgBlacklistPermissions, opts ...grpc.CallOption) (*MsgBlacklistPermissionsResponse, error) {
	out := new(MsgBlacklistPermissionsResponse)
	err := c.cc.Invoke(ctx, "/kira.gov.Msg/BlacklistPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveBlacklistedPermissions(ctx context.Context, in *MsgRemoveBlacklistedPermissions, opts ...grpc.CallOption) (*MsgRemoveBlacklistedPermissionsResponse, error) {
	out := new(MsgRemoveBlacklistedPermissionsResponse)
	err := c.cc.Invoke(ctx, "/kira.gov.Msg/RemoveBlacklistedPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClaimCouncilor(ctx context.Context, in *MsgClaimCouncilor, opts ...grpc.CallOption) (*MsgClaimCouncilorResponse, error) {
	out := new(MsgClaimCouncilorResponse)
	err := c.cc.Invoke(ctx, "/kira.gov.Msg/ClaimCouncilor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) VoteProposal(ctx context.Context, in *MsgVoteProposal, opts ...grpc.CallOption) (*MsgVoteProposalResponse, error) {
	out := new(MsgVoteProposalResponse)
	err := c.cc.Invoke(ctx, "/kira.gov.Msg/VoteProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateRole(ctx context.Context, in *MsgCreateRole, opts ...grpc.CallOption) (*MsgCreateRoleResponse, error) {
	out := new(MsgCreateRoleResponse)
	err := c.cc.Invoke(ctx, "/kira.gov.Msg/CreateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AssignRole(ctx context.Context, in *MsgAssignRole, opts ...grpc.CallOption) (*MsgAssignRoleResponse, error) {
	out := new(MsgAssignRoleResponse)
	err := c.cc.Invoke(ctx, "/kira.gov.Msg/AssignRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveRole(ctx context.Context, in *MsgRemoveRole, opts ...grpc.CallOption) (*MsgRemoveRoleResponse, error) {
	out := new(MsgRemoveRoleResponse)
	err := c.cc.Invoke(ctx, "/kira.gov.Msg/RemoveRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetNetworkProperties(ctx context.Context, in *MsgSetNetworkProperties, opts ...grpc.CallOption) (*MsgSetNetworkPropertiesResponse, error) {
	out := new(MsgSetNetworkPropertiesResponse)
	err := c.cc.Invoke(ctx, "/kira.gov.Msg/SetNetworkProperties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetExecutionFee(ctx context.Context, in *MsgSetExecutionFee, opts ...grpc.CallOption) (*MsgSetExecutionFeeResponse, error) {
	out := new(MsgSetExecutionFeeResponse)
	err := c.cc.Invoke(ctx, "/kira.gov.Msg/SetExecutionFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WhitelistRolePermission(ctx context.Context, in *MsgWhitelistRolePermission, opts ...grpc.CallOption) (*MsgWhitelistRolePermissionResponse, error) {
	out := new(MsgWhitelistRolePermissionResponse)
	err := c.cc.Invoke(ctx, "/kira.gov.Msg/WhitelistRolePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BlacklistRolePermission(ctx context.Context, in *MsgBlacklistRolePermission, opts ...grpc.CallOption) (*MsgBlacklistRolePermissionResponse, error) {
	out := new(MsgBlacklistRolePermissionResponse)
	err := c.cc.Invoke(ctx, "/kira.gov.Msg/BlacklistRolePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveWhitelistRolePermission(ctx context.Context, in *MsgRemoveWhitelistRolePermission, opts ...grpc.CallOption) (*MsgRemoveWhitelistRolePermissionResponse, error) {
	out := new(MsgRemoveWhitelistRolePermissionResponse)
	err := c.cc.Invoke(ctx, "/kira.gov.Msg/RemoveWhitelistRolePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveBlacklistRolePermission(ctx context.Context, in *MsgRemoveBlacklistRolePermission, opts ...grpc.CallOption) (*MsgRemoveBlacklistRolePermissionResponse, error) {
	out := new(MsgRemoveBlacklistRolePermissionResponse)
	err := c.cc.Invoke(ctx, "/kira.gov.Msg/RemoveBlacklistRolePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterIdentityRecords(ctx context.Context, in *MsgRegisterIdentityRecords, opts ...grpc.CallOption) (*MsgRegisterIdentityRecordsResponse, error) {
	out := new(MsgRegisterIdentityRecordsResponse)
	err := c.cc.Invoke(ctx, "/kira.gov.Msg/RegisterIdentityRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteIdentityRecords(ctx context.Context, in *MsgDeleteIdentityRecords, opts ...grpc.CallOption) (*MsgDeleteIdentityRecordsResponse, error) {
	out := new(MsgDeleteIdentityRecordsResponse)
	err := c.cc.Invoke(ctx, "/kira.gov.Msg/DeleteIdentityRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RequestIdentityRecordsVerify(ctx context.Context, in *MsgRequestIdentityRecordsVerify, opts ...grpc.CallOption) (*MsgRequestIdentityRecordsVerifyResponse, error) {
	out := new(MsgRequestIdentityRecordsVerifyResponse)
	err := c.cc.Invoke(ctx, "/kira.gov.Msg/RequestIdentityRecordsVerify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) HandleIdentityRecordsVerifyRequest(ctx context.Context, in *MsgHandleIdentityRecordsVerifyRequest, opts ...grpc.CallOption) (*MsgHandleIdentityRecordsVerifyResponse, error) {
	out := new(MsgHandleIdentityRecordsVerifyResponse)
	err := c.cc.Invoke(ctx, "/kira.gov.Msg/HandleIdentityRecordsVerifyRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelIdentityRecordsVerifyRequest(ctx context.Context, in *MsgCancelIdentityRecordsVerifyRequest, opts ...grpc.CallOption) (*MsgCancelIdentityRecordsVerifyRequestResponse, error) {
	out := new(MsgCancelIdentityRecordsVerifyRequestResponse)
	err := c.cc.Invoke(ctx, "/kira.gov.Msg/CancelIdentityRecordsVerifyRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// SubmitProposal defines a method to create new proposal given a content.
	SubmitProposal(context.Context, *MsgSubmitProposal) (*MsgSubmitProposalResponse, error)
	// WhitelistPermissions defines a method for whitelisting a permission for an address.
	WhitelistPermissions(context.Context, *MsgWhitelistPermissions) (*MsgWhitelistPermissionsResponse, error)
	// WhitelistPermissions defines a method for removing whitelisted permission for an address.
	RemoveWhitelistedPermissions(context.Context, *MsgRemoveWhitelistedPermissions) (*MsgRemoveWhitelistedPermissionsResponse, error)
	// BlacklistPermissions defines a method for blacklisting a permission for an address.
	BlacklistPermissions(context.Context, *MsgBlacklistPermissions) (*MsgBlacklistPermissionsResponse, error)
	// RemoveBlacklistedPermissions defines a method for removing a blacklisted permission for an address.
	RemoveBlacklistedPermissions(context.Context, *MsgRemoveBlacklistedPermissions) (*MsgRemoveBlacklistedPermissionsResponse, error)
	// ClaimCouncilor defines a method for claiming a councilor
	ClaimCouncilor(context.Context, *MsgClaimCouncilor) (*MsgClaimCouncilorResponse, error)
	// VoteProposal defines a method for voting a proposal
	VoteProposal(context.Context, *MsgVoteProposal) (*MsgVoteProposalResponse, error)
	// CreateRole defines a method for creating a role
	CreateRole(context.Context, *MsgCreateRole) (*MsgCreateRoleResponse, error)
	// AssignRole defines a method for assigning a role to an address
	AssignRole(context.Context, *MsgAssignRole) (*MsgAssignRoleResponse, error)
	// RemoveRole defines a method for removing a role from an address
	RemoveRole(context.Context, *MsgRemoveRole) (*MsgRemoveRoleResponse, error)
	// SetNetworkProperties defines a method for setting network properties
	SetNetworkProperties(context.Context, *MsgSetNetworkProperties) (*MsgSetNetworkPropertiesResponse, error)
	// SetExecutionFee defines a method for setting execution fee
	SetExecutionFee(context.Context, *MsgSetExecutionFee) (*MsgSetExecutionFeeResponse, error)
	// WhitelistRolePermission defines a method for whitelisting a permission for a role
	WhitelistRolePermission(context.Context, *MsgWhitelistRolePermission) (*MsgWhitelistRolePermissionResponse, error)
	// BlacklistRolePermission defines a method for blacklisting a permission for a role
	BlacklistRolePermission(context.Context, *MsgBlacklistRolePermission) (*MsgBlacklistRolePermissionResponse, error)
	// RemoveWhitelistRolePermission defines a method for removing whitelisted permission from a role
	RemoveWhitelistRolePermission(context.Context, *MsgRemoveWhitelistRolePermission) (*MsgRemoveWhitelistRolePermissionResponse, error)
	// RemoveBlacklistRolePermission defines a method for removing blacklisted permission from a role
	RemoveBlacklistRolePermission(context.Context, *MsgRemoveBlacklistRolePermission) (*MsgRemoveBlacklistRolePermissionResponse, error)
	// RegisterIdentityRecord defines a method to create identity records for an address
	RegisterIdentityRecords(context.Context, *MsgRegisterIdentityRecords) (*MsgRegisterIdentityRecordsResponse, error)
	// DeleteIdentityRecords defines a method to delete identity records
	DeleteIdentityRecords(context.Context, *MsgDeleteIdentityRecords) (*MsgDeleteIdentityRecordsResponse, error)
	// RequestIdentityRecordsVerify defines a method to request verify request from specific verifier
	RequestIdentityRecordsVerify(context.Context, *MsgRequestIdentityRecordsVerify) (*MsgRequestIdentityRecordsVerifyResponse, error)
	// HandleIdentityRecordsVerifyRequest defines a method to accept or reject verification request
	HandleIdentityRecordsVerifyRequest(context.Context, *MsgHandleIdentityRecordsVerifyRequest) (*MsgHandleIdentityRecordsVerifyResponse, error)
	// CancelIdentityRecordsVerifyRequest defines a method to cancel verification request
	CancelIdentityRecordsVerifyRequest(context.Context, *MsgCancelIdentityRecordsVerifyRequest) (*MsgCancelIdentityRecordsVerifyRequestResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) SubmitProposal(context.Context, *MsgSubmitProposal) (*MsgSubmitProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitProposal not implemented")
}
func (UnimplementedMsgServer) WhitelistPermissions(context.Context, *MsgWhitelistPermissions) (*MsgWhitelistPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhitelistPermissions not implemented")
}
func (UnimplementedMsgServer) RemoveWhitelistedPermissions(context.Context, *MsgRemoveWhitelistedPermissions) (*MsgRemoveWhitelistedPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveWhitelistedPermissions not implemented")
}
func (UnimplementedMsgServer) BlacklistPermissions(context.Context, *MsgBlacklistPermissions) (*MsgBlacklistPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlacklistPermissions not implemented")
}
func (UnimplementedMsgServer) RemoveBlacklistedPermissions(context.Context, *MsgRemoveBlacklistedPermissions) (*MsgRemoveBlacklistedPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBlacklistedPermissions not implemented")
}
func (UnimplementedMsgServer) ClaimCouncilor(context.Context, *MsgClaimCouncilor) (*MsgClaimCouncilorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimCouncilor not implemented")
}
func (UnimplementedMsgServer) VoteProposal(context.Context, *MsgVoteProposal) (*MsgVoteProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteProposal not implemented")
}
func (UnimplementedMsgServer) CreateRole(context.Context, *MsgCreateRole) (*MsgCreateRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedMsgServer) AssignRole(context.Context, *MsgAssignRole) (*MsgAssignRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignRole not implemented")
}
func (UnimplementedMsgServer) RemoveRole(context.Context, *MsgRemoveRole) (*MsgRemoveRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRole not implemented")
}
func (UnimplementedMsgServer) SetNetworkProperties(context.Context, *MsgSetNetworkProperties) (*MsgSetNetworkPropertiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNetworkProperties not implemented")
}
func (UnimplementedMsgServer) SetExecutionFee(context.Context, *MsgSetExecutionFee) (*MsgSetExecutionFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetExecutionFee not implemented")
}
func (UnimplementedMsgServer) WhitelistRolePermission(context.Context, *MsgWhitelistRolePermission) (*MsgWhitelistRolePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhitelistRolePermission not implemented")
}
func (UnimplementedMsgServer) BlacklistRolePermission(context.Context, *MsgBlacklistRolePermission) (*MsgBlacklistRolePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlacklistRolePermission not implemented")
}
func (UnimplementedMsgServer) RemoveWhitelistRolePermission(context.Context, *MsgRemoveWhitelistRolePermission) (*MsgRemoveWhitelistRolePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveWhitelistRolePermission not implemented")
}
func (UnimplementedMsgServer) RemoveBlacklistRolePermission(context.Context, *MsgRemoveBlacklistRolePermission) (*MsgRemoveBlacklistRolePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBlacklistRolePermission not implemented")
}
func (UnimplementedMsgServer) RegisterIdentityRecords(context.Context, *MsgRegisterIdentityRecords) (*MsgRegisterIdentityRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterIdentityRecords not implemented")
}
func (UnimplementedMsgServer) DeleteIdentityRecords(context.Context, *MsgDeleteIdentityRecords) (*MsgDeleteIdentityRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIdentityRecords not implemented")
}
func (UnimplementedMsgServer) RequestIdentityRecordsVerify(context.Context, *MsgRequestIdentityRecordsVerify) (*MsgRequestIdentityRecordsVerifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestIdentityRecordsVerify not implemented")
}
func (UnimplementedMsgServer) HandleIdentityRecordsVerifyRequest(context.Context, *MsgHandleIdentityRecordsVerifyRequest) (*MsgHandleIdentityRecordsVerifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleIdentityRecordsVerifyRequest not implemented")
}
func (UnimplementedMsgServer) CancelIdentityRecordsVerifyRequest(context.Context, *MsgCancelIdentityRecordsVerifyRequest) (*MsgCancelIdentityRecordsVerifyRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelIdentityRecordsVerifyRequest not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_SubmitProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitProposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.gov.Msg/SubmitProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitProposal(ctx, req.(*MsgSubmitProposal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WhitelistPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWhitelistPermissions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WhitelistPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.gov.Msg/WhitelistPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WhitelistPermissions(ctx, req.(*MsgWhitelistPermissions))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveWhitelistedPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveWhitelistedPermissions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveWhitelistedPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.gov.Msg/RemoveWhitelistedPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveWhitelistedPermissions(ctx, req.(*MsgRemoveWhitelistedPermissions))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BlacklistPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBlacklistPermissions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BlacklistPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.gov.Msg/BlacklistPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BlacklistPermissions(ctx, req.(*MsgBlacklistPermissions))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveBlacklistedPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveBlacklistedPermissions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveBlacklistedPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.gov.Msg/RemoveBlacklistedPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveBlacklistedPermissions(ctx, req.(*MsgRemoveBlacklistedPermissions))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClaimCouncilor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaimCouncilor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClaimCouncilor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.gov.Msg/ClaimCouncilor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClaimCouncilor(ctx, req.(*MsgClaimCouncilor))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_VoteProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgVoteProposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).VoteProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.gov.Msg/VoteProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).VoteProposal(ctx, req.(*MsgVoteProposal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.gov.Msg/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateRole(ctx, req.(*MsgCreateRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AssignRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAssignRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AssignRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.gov.Msg/AssignRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AssignRole(ctx, req.(*MsgAssignRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.gov.Msg/RemoveRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveRole(ctx, req.(*MsgRemoveRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetNetworkProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetNetworkProperties)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetNetworkProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.gov.Msg/SetNetworkProperties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetNetworkProperties(ctx, req.(*MsgSetNetworkProperties))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetExecutionFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetExecutionFee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetExecutionFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.gov.Msg/SetExecutionFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetExecutionFee(ctx, req.(*MsgSetExecutionFee))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WhitelistRolePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWhitelistRolePermission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WhitelistRolePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.gov.Msg/WhitelistRolePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WhitelistRolePermission(ctx, req.(*MsgWhitelistRolePermission))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BlacklistRolePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBlacklistRolePermission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BlacklistRolePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.gov.Msg/BlacklistRolePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BlacklistRolePermission(ctx, req.(*MsgBlacklistRolePermission))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveWhitelistRolePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveWhitelistRolePermission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveWhitelistRolePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.gov.Msg/RemoveWhitelistRolePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveWhitelistRolePermission(ctx, req.(*MsgRemoveWhitelistRolePermission))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveBlacklistRolePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveBlacklistRolePermission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveBlacklistRolePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.gov.Msg/RemoveBlacklistRolePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveBlacklistRolePermission(ctx, req.(*MsgRemoveBlacklistRolePermission))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterIdentityRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterIdentityRecords)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterIdentityRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.gov.Msg/RegisterIdentityRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterIdentityRecords(ctx, req.(*MsgRegisterIdentityRecords))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteIdentityRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteIdentityRecords)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteIdentityRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.gov.Msg/DeleteIdentityRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteIdentityRecords(ctx, req.(*MsgDeleteIdentityRecords))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RequestIdentityRecordsVerify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRequestIdentityRecordsVerify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RequestIdentityRecordsVerify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.gov.Msg/RequestIdentityRecordsVerify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RequestIdentityRecordsVerify(ctx, req.(*MsgRequestIdentityRecordsVerify))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_HandleIdentityRecordsVerifyRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgHandleIdentityRecordsVerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).HandleIdentityRecordsVerifyRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.gov.Msg/HandleIdentityRecordsVerifyRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).HandleIdentityRecordsVerifyRequest(ctx, req.(*MsgHandleIdentityRecordsVerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelIdentityRecordsVerifyRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelIdentityRecordsVerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelIdentityRecordsVerifyRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.gov.Msg/CancelIdentityRecordsVerifyRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelIdentityRecordsVerifyRequest(ctx, req.(*MsgCancelIdentityRecordsVerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kira.gov.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitProposal",
			Handler:    _Msg_SubmitProposal_Handler,
		},
		{
			MethodName: "WhitelistPermissions",
			Handler:    _Msg_WhitelistPermissions_Handler,
		},
		{
			MethodName: "RemoveWhitelistedPermissions",
			Handler:    _Msg_RemoveWhitelistedPermissions_Handler,
		},
		{
			MethodName: "BlacklistPermissions",
			Handler:    _Msg_BlacklistPermissions_Handler,
		},
		{
			MethodName: "RemoveBlacklistedPermissions",
			Handler:    _Msg_RemoveBlacklistedPermissions_Handler,
		},
		{
			MethodName: "ClaimCouncilor",
			Handler:    _Msg_ClaimCouncilor_Handler,
		},
		{
			MethodName: "VoteProposal",
			Handler:    _Msg_VoteProposal_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _Msg_CreateRole_Handler,
		},
		{
			MethodName: "AssignRole",
			Handler:    _Msg_AssignRole_Handler,
		},
		{
			MethodName: "RemoveRole",
			Handler:    _Msg_RemoveRole_Handler,
		},
		{
			MethodName: "SetNetworkProperties",
			Handler:    _Msg_SetNetworkProperties_Handler,
		},
		{
			MethodName: "SetExecutionFee",
			Handler:    _Msg_SetExecutionFee_Handler,
		},
		{
			MethodName: "WhitelistRolePermission",
			Handler:    _Msg_WhitelistRolePermission_Handler,
		},
		{
			MethodName: "BlacklistRolePermission",
			Handler:    _Msg_BlacklistRolePermission_Handler,
		},
		{
			MethodName: "RemoveWhitelistRolePermission",
			Handler:    _Msg_RemoveWhitelistRolePermission_Handler,
		},
		{
			MethodName: "RemoveBlacklistRolePermission",
			Handler:    _Msg_RemoveBlacklistRolePermission_Handler,
		},
		{
			MethodName: "RegisterIdentityRecords",
			Handler:    _Msg_RegisterIdentityRecords_Handler,
		},
		{
			MethodName: "DeleteIdentityRecords",
			Handler:    _Msg_DeleteIdentityRecords_Handler,
		},
		{
			MethodName: "RequestIdentityRecordsVerify",
			Handler:    _Msg_RequestIdentityRecordsVerify_Handler,
		},
		{
			MethodName: "HandleIdentityRecordsVerifyRequest",
			Handler:    _Msg_HandleIdentityRecordsVerifyRequest_Handler,
		},
		{
			MethodName: "CancelIdentityRecordsVerifyRequest",
			Handler:    _Msg_CancelIdentityRecordsVerifyRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kira/gov/tx.proto",
}
