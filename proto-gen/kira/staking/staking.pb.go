// Code generated by protoc-gen-go. DO NOT EDIT.
// source: kira/staking/staking.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ValidatorStatus int32

const (
	// Undefined status
	ValidatorStatus_UNDEFINED ValidatorStatus = 0
	// Active status
	ValidatorStatus_ACTIVE ValidatorStatus = 1
	// Inactive status
	ValidatorStatus_INACTIVE ValidatorStatus = 2
	// Paused status
	ValidatorStatus_PAUSED ValidatorStatus = 3
	// Jailed status
	ValidatorStatus_JAILED ValidatorStatus = 4
)

var ValidatorStatus_name = map[int32]string{
	0: "UNDEFINED",
	1: "ACTIVE",
	2: "INACTIVE",
	3: "PAUSED",
	4: "JAILED",
}

var ValidatorStatus_value = map[string]int32{
	"UNDEFINED": 0,
	"ACTIVE":    1,
	"INACTIVE":  2,
	"PAUSED":    3,
	"JAILED":    4,
}

func (x ValidatorStatus) String() string {
	return proto.EnumName(ValidatorStatus_name, int32(x))
}

func (ValidatorStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_84a0e4e3724532dc, []int{0}
}

type MsgClaimValidator struct {
	Moniker              string     `protobuf:"bytes,1,opt,name=moniker,proto3" json:"moniker,omitempty"`
	ValKey               []byte     `protobuf:"bytes,2,opt,name=val_key,json=valKey,proto3" json:"val_key,omitempty"`
	PubKey               *anypb.Any `protobuf:"bytes,3,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *MsgClaimValidator) Reset()         { *m = MsgClaimValidator{} }
func (m *MsgClaimValidator) String() string { return proto.CompactTextString(m) }
func (*MsgClaimValidator) ProtoMessage()    {}
func (*MsgClaimValidator) Descriptor() ([]byte, []int) {
	return fileDescriptor_84a0e4e3724532dc, []int{0}
}

func (m *MsgClaimValidator) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MsgClaimValidator.Unmarshal(m, b)
}
func (m *MsgClaimValidator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MsgClaimValidator.Marshal(b, m, deterministic)
}
func (m *MsgClaimValidator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimValidator.Merge(m, src)
}
func (m *MsgClaimValidator) XXX_Size() int {
	return xxx_messageInfo_MsgClaimValidator.Size(m)
}
func (m *MsgClaimValidator) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimValidator.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimValidator proto.InternalMessageInfo

func (m *MsgClaimValidator) GetMoniker() string {
	if m != nil {
		return m.Moniker
	}
	return ""
}

func (m *MsgClaimValidator) GetValKey() []byte {
	if m != nil {
		return m.ValKey
	}
	return nil
}

func (m *MsgClaimValidator) GetPubKey() *anypb.Any {
	if m != nil {
		return m.PubKey
	}
	return nil
}

// MsgClaimValidatorResponse defines the Msg/ClaimValidator response type.
type MsgClaimValidatorResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgClaimValidatorResponse) Reset()         { *m = MsgClaimValidatorResponse{} }
func (m *MsgClaimValidatorResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClaimValidatorResponse) ProtoMessage()    {}
func (*MsgClaimValidatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_84a0e4e3724532dc, []int{1}
}

func (m *MsgClaimValidatorResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MsgClaimValidatorResponse.Unmarshal(m, b)
}
func (m *MsgClaimValidatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MsgClaimValidatorResponse.Marshal(b, m, deterministic)
}
func (m *MsgClaimValidatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimValidatorResponse.Merge(m, src)
}
func (m *MsgClaimValidatorResponse) XXX_Size() int {
	return xxx_messageInfo_MsgClaimValidatorResponse.Size(m)
}
func (m *MsgClaimValidatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimValidatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimValidatorResponse proto.InternalMessageInfo

type Validator struct {
	ValKey []byte          `protobuf:"bytes,1,opt,name=val_key,json=valKey,proto3" json:"val_key,omitempty"`
	PubKey *anypb.Any      `protobuf:"bytes,2,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	Status ValidatorStatus `protobuf:"varint,3,opt,name=status,proto3,enum=kira.staking.ValidatorStatus" json:"status,omitempty"`
	// To judge validator performance a streak and rank properties should be created (as part of each validator status data).
	// The streak would imply consecutive number of times that given validator managed to successfully propose a block (since the last time he failed) that was accepted into the blockchain state. The streak property should be zeroed every time validator misses to propose a block and the mischance property is incremented. You can treat streak in similar way to kill-streaks in video games - which imply your short term performance.
	// The rank property is a long term statistics implying the "longest" streak that validator ever achieved, it can be expressed as rank = MAX(rank, streak). Under certain circumstances we should however decrease the rank of the validator. If the mischance property is incremented, the rank should be decremented by X (default 10), that is rank = MAX(rank - X, 0). Every time node status changes to inactive the rank should be divided by 2, that is rank = FLOOR(rank / 2)
	// The streak and rank will enable governance to judge real life performance of validators on the mainnet or testnet, and potentially propose eviction of the weakest and least reliable operators.
	Rank                 int64    `protobuf:"varint,4,opt,name=rank,proto3" json:"rank,omitempty"`
	Streak               int64    `protobuf:"varint,5,opt,name=streak,proto3" json:"streak,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Validator) Reset()         { *m = Validator{} }
func (m *Validator) String() string { return proto.CompactTextString(m) }
func (*Validator) ProtoMessage()    {}
func (*Validator) Descriptor() ([]byte, []int) {
	return fileDescriptor_84a0e4e3724532dc, []int{2}
}

func (m *Validator) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Validator.Unmarshal(m, b)
}
func (m *Validator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Validator.Marshal(b, m, deterministic)
}
func (m *Validator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Validator.Merge(m, src)
}
func (m *Validator) XXX_Size() int {
	return xxx_messageInfo_Validator.Size(m)
}
func (m *Validator) XXX_DiscardUnknown() {
	xxx_messageInfo_Validator.DiscardUnknown(m)
}

var xxx_messageInfo_Validator proto.InternalMessageInfo

func (m *Validator) GetValKey() []byte {
	if m != nil {
		return m.ValKey
	}
	return nil
}

func (m *Validator) GetPubKey() *anypb.Any {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *Validator) GetStatus() ValidatorStatus {
	if m != nil {
		return m.Status
	}
	return ValidatorStatus_UNDEFINED
}

func (m *Validator) GetRank() int64 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *Validator) GetStreak() int64 {
	if m != nil {
		return m.Streak
	}
	return 0
}

type ValidatorJailInfo struct {
	Time                 *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ValidatorJailInfo) Reset()         { *m = ValidatorJailInfo{} }
func (m *ValidatorJailInfo) String() string { return proto.CompactTextString(m) }
func (*ValidatorJailInfo) ProtoMessage()    {}
func (*ValidatorJailInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_84a0e4e3724532dc, []int{3}
}

func (m *ValidatorJailInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ValidatorJailInfo.Unmarshal(m, b)
}
func (m *ValidatorJailInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ValidatorJailInfo.Marshal(b, m, deterministic)
}
func (m *ValidatorJailInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorJailInfo.Merge(m, src)
}
func (m *ValidatorJailInfo) XXX_Size() int {
	return xxx_messageInfo_ValidatorJailInfo.Size(m)
}
func (m *ValidatorJailInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorJailInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorJailInfo proto.InternalMessageInfo

func (m *ValidatorJailInfo) GetTime() *timestamppb.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func init() {
	proto.RegisterEnum("kira.staking.ValidatorStatus", ValidatorStatus_name, ValidatorStatus_value)
	proto.RegisterType((*MsgClaimValidator)(nil), "kira.staking.MsgClaimValidator")
	proto.RegisterType((*MsgClaimValidatorResponse)(nil), "kira.staking.MsgClaimValidatorResponse")
	proto.RegisterType((*Validator)(nil), "kira.staking.Validator")
	proto.RegisterType((*ValidatorJailInfo)(nil), "kira.staking.ValidatorJailInfo")
}

func init() { proto.RegisterFile("kira/staking/staking.proto", fileDescriptor_84a0e4e3724532dc) }

var fileDescriptor_84a0e4e3724532dc = []byte{
	// 599 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x53, 0x4d, 0x6b, 0xd4, 0x40,
	0x18, 0x6e, 0x76, 0x63, 0xda, 0x9d, 0xd6, 0xba, 0x1d, 0x4a, 0xd9, 0xa6, 0x6a, 0x42, 0x2e, 0xae,
	0x95, 0x26, 0xb0, 0x22, 0x48, 0x6f, 0xd9, 0x0f, 0x21, 0xad, 0x2d, 0x25, 0xfd, 0x00, 0x8b, 0x50,
	0x66, 0x37, 0xd3, 0x38, 0xe4, 0x63, 0x42, 0x26, 0x29, 0xe6, 0x1f, 0x48, 0x4f, 0x5e, 0x3d, 0x14,
	0x04, 0xcf, 0xde, 0xfc, 0x11, 0xe2, 0x8f, 0xa8, 0x57, 0x0f, 0x9e, 0x3c, 0x7a, 0x92, 0x4c, 0x26,
	0xfd, 0x3c, 0x78, 0xd1, 0xd3, 0xe4, 0x9d, 0xe7, 0x79, 0xdf, 0xbc, 0xcf, 0xc3, 0x33, 0x40, 0x0d,
	0x48, 0x8a, 0x2c, 0x96, 0xa1, 0x80, 0xc4, 0x7e, 0x7d, 0x9a, 0x49, 0x4a, 0x33, 0x0a, 0xe7, 0x4a,
	0xcc, 0x14, 0x77, 0xea, 0xa2, 0x4f, 0x7d, 0xca, 0x01, 0xab, 0xfc, 0xaa, 0x38, 0xea, 0xb2, 0x4f,
	0xa9, 0x1f, 0x62, 0x8b, 0x57, 0xe3, 0xfc, 0xd8, 0x42, 0x71, 0x51, 0x43, 0x13, 0xca, 0x22, 0xca,
	0x8e, 0xaa, 0x9e, 0xaa, 0x10, 0x90, 0x76, 0xb3, 0x2b, 0x23, 0x11, 0x66, 0x19, 0x8a, 0x12, 0x41,
	0x58, 0xb9, 0xb6, 0x56, 0x92, 0xd2, 0x84, 0x32, 0x14, 0x56, 0xa0, 0xf1, 0x53, 0x02, 0x0b, 0x5b,
	0xcc, 0x1f, 0x84, 0x88, 0x44, 0x07, 0x28, 0x24, 0x1e, 0xca, 0x68, 0x0a, 0x3b, 0x60, 0x3a, 0xa2,
	0x31, 0x09, 0x70, 0xda, 0x91, 0x74, 0xa9, 0xdb, 0x72, 0xeb, 0x12, 0xbe, 0x06, 0xd3, 0x27, 0x28,
	0x3c, 0x0a, 0x70, 0xd1, 0x69, 0xe8, 0x52, 0x77, 0xae, 0x3f, 0xf8, 0x75, 0xae, 0xcd, 0x17, 0x28,
	0x0a, 0xd7, 0x0d, 0x01, 0x18, 0xbf, 0xcf, 0xb5, 0x35, 0x9f, 0x64, 0x6f, 0xf2, 0xb1, 0x39, 0xa1,
	0x91, 0xd8, 0x56, 0x1c, 0x6b, 0xcc, 0x0b, 0xac, 0xac, 0x48, 0x30, 0x33, 0x0f, 0x50, 0x68, 0x7b,
	0x5e, 0x8a, 0x19, 0x73, 0x95, 0x13, 0x14, 0x6e, 0xe2, 0x02, 0xbe, 0x02, 0xd3, 0x49, 0x3e, 0xe6,
	0xd3, 0x9b, 0xba, 0xd4, 0x9d, 0xed, 0x2d, 0x9a, 0x95, 0x3a, 0xb3, 0x56, 0x67, 0xda, 0x71, 0xd1,
	0x5f, 0xbd, 0xfc, 0xa7, 0xa0, 0x1b, 0xdf, 0xbe, 0xac, 0x2d, 0x0a, 0x5b, 0x26, 0x69, 0x91, 0x64,
	0xd4, 0xdc, 0xc9, 0xc7, 0x9b, 0xb8, 0x70, 0x95, 0x84, 0x9f, 0xeb, 0xf2, 0x8f, 0x8f, 0x9a, 0x64,
	0xac, 0x80, 0xe5, 0x5b, 0x6a, 0x5d, 0xcc, 0x12, 0x1a, 0x33, 0x6c, 0x7c, 0x6e, 0x80, 0xd6, 0xa5,
	0x07, 0x57, 0x94, 0x4a, 0xff, 0x55, 0x69, 0xe3, 0xdf, 0x2a, 0x85, 0xcf, 0x80, 0xc2, 0x32, 0x94,
	0xe5, 0x8c, 0x7b, 0x38, 0xdf, 0x7b, 0x60, 0x5e, 0xcd, 0x9e, 0x79, 0xa1, 0x70, 0x97, 0x93, 0x5c,
	0x41, 0x86, 0x10, 0xc8, 0x29, 0x8a, 0x83, 0x8e, 0xac, 0x4b, 0xdd, 0xa6, 0xcb, 0xbf, 0xe1, 0x52,
	0x39, 0x2a, 0xc5, 0x28, 0xe8, 0xdc, 0xe1, 0xb7, 0xa2, 0x12, 0x66, 0x6e, 0x81, 0x85, 0x8b, 0x61,
	0x1b, 0x88, 0x84, 0x4e, 0x7c, 0x4c, 0xe1, 0x73, 0x20, 0x97, 0x01, 0xe4, 0x9e, 0xcd, 0xf6, 0xd4,
	0x5b, 0xaa, 0xf6, 0xea, 0x74, 0xf6, 0x67, 0xbe, 0x9e, 0x6b, 0x53, 0xef, 0xbf, 0x6b, 0x92, 0xcb,
	0x3b, 0x56, 0x3f, 0x48, 0xe0, 0xde, 0x8d, 0xe5, 0xe0, 0x7d, 0xd0, 0xda, 0xdf, 0x1e, 0x8e, 0x5e,
	0x38, 0xdb, 0xa3, 0x61, 0x7b, 0x4a, 0xbd, 0x7b, 0x7a, 0xa6, 0xb7, 0xf6, 0x63, 0x0f, 0x1f, 0x93,
	0x18, 0x7b, 0xe5, 0x7a, 0xf6, 0x60, 0xcf, 0x39, 0x18, 0xb5, 0x25, 0x15, 0x9c, 0x9e, 0xe9, 0x8a,
	0x3d, 0xc9, 0xc8, 0x09, 0x86, 0x2a, 0x98, 0x71, 0xb6, 0x05, 0xd2, 0x50, 0xe7, 0x4e, 0xcf, 0xf4,
	0x19, 0x27, 0x46, 0x15, 0xb6, 0x04, 0x94, 0x1d, 0x7b, 0x7f, 0x77, 0x34, 0x6c, 0x37, 0xab, 0x9e,
	0x1d, 0x94, 0xb3, 0x6a, 0xd6, 0x86, 0xed, 0xbc, 0x1c, 0x0d, 0xdb, 0x72, 0x75, 0x5f, 0x2a, 0xc2,
	0x9e, 0x2a, 0xbf, 0xfb, 0xf4, 0x70, 0xaa, 0x87, 0x40, 0x73, 0x8b, 0xf9, 0xf0, 0x10, 0xcc, 0xdf,
	0x78, 0x29, 0xda, 0x75, 0x73, 0x6f, 0x85, 0x4b, 0x7d, 0xf4, 0x17, 0x42, 0x9d, 0xbe, 0xfe, 0x93,
	0xc3, 0xc7, 0x57, 0xa2, 0xb4, 0x49, 0x52, 0x34, 0xa0, 0x29, 0xb6, 0x18, 0x0e, 0x10, 0xb1, 0xde,
	0x5e, 0xbc, 0x5f, 0x9e, 0xa8, 0xb1, 0xc2, 0xfd, 0x7c, 0xfa, 0x27, 0x00, 0x00, 0xff, 0xff, 0x18,
	0xf8, 0x0f, 0x08, 0x73, 0x04, 0x00, 0x00,
}
