// Code generated by protoc-gen-go. DO NOT EDIT.
// source: kira/staking/query.proto

package staking

import (
	context "context"
	fmt "fmt"
	base "github.com/KiraCore/interx/proto-gen/cosmos/base"
	gov "github.com/KiraCore/interx/proto-gen/kira/gov"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// ValidatorsRequest is the request type for the Query/AllValidators RPC method.
type ValidatorsRequest struct {
	Address  string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Valkey   string `protobuf:"bytes,2,opt,name=valkey,proto3" json:"valkey,omitempty"`
	Pubkey   string `protobuf:"bytes,3,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Moniker  string `protobuf:"bytes,4,opt,name=moniker,proto3" json:"moniker,omitempty"`
	Status   string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	Proposer string `protobuf:"bytes,6,opt,name=proposer,proto3" json:"proposer,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination           *base.PageRequest `protobuf:"bytes,7,opt,name=pagination,proto3" json:"pagination,omitempty"`
	All                  bool              `protobuf:"varint,8,opt,name=all,proto3" json:"all,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ValidatorsRequest) Reset()         { *m = ValidatorsRequest{} }
func (m *ValidatorsRequest) String() string { return proto.CompactTextString(m) }
func (*ValidatorsRequest) ProtoMessage()    {}
func (*ValidatorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6d324c07c7f430e, []int{0}
}

func (m *ValidatorsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ValidatorsRequest.Unmarshal(m, b)
}
func (m *ValidatorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ValidatorsRequest.Marshal(b, m, deterministic)
}
func (m *ValidatorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorsRequest.Merge(m, src)
}
func (m *ValidatorsRequest) XXX_Size() int {
	return xxx_messageInfo_ValidatorsRequest.Size(m)
}
func (m *ValidatorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorsRequest proto.InternalMessageInfo

func (m *ValidatorsRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ValidatorsRequest) GetValkey() string {
	if m != nil {
		return m.Valkey
	}
	return ""
}

func (m *ValidatorsRequest) GetPubkey() string {
	if m != nil {
		return m.Pubkey
	}
	return ""
}

func (m *ValidatorsRequest) GetMoniker() string {
	if m != nil {
		return m.Moniker
	}
	return ""
}

func (m *ValidatorsRequest) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *ValidatorsRequest) GetProposer() string {
	if m != nil {
		return m.Proposer
	}
	return ""
}

func (m *ValidatorsRequest) GetPagination() *base.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *ValidatorsRequest) GetAll() bool {
	if m != nil {
		return m.All
	}
	return false
}

type QueryValidator struct {
	Address              string                `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Valkey               string                `protobuf:"bytes,2,opt,name=valkey,proto3" json:"valkey,omitempty"`
	Pubkey               string                `protobuf:"bytes,3,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Proposer             string                `protobuf:"bytes,4,opt,name=proposer,proto3" json:"proposer,omitempty"`
	Moniker              string                `protobuf:"bytes,5,opt,name=moniker,proto3" json:"moniker,omitempty"`
	Status               string                `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	Rank                 int64                 `protobuf:"varint,7,opt,name=rank,proto3" json:"rank,omitempty"`
	Streak               int64                 `protobuf:"varint,8,opt,name=streak,proto3" json:"streak,omitempty"`
	Mischance            int64                 `protobuf:"varint,9,opt,name=mischance,proto3" json:"mischance,omitempty"`
	Identity             []*gov.IdentityRecord `protobuf:"bytes,10,rep,name=identity,proto3" json:"identity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *QueryValidator) Reset()         { *m = QueryValidator{} }
func (m *QueryValidator) String() string { return proto.CompactTextString(m) }
func (*QueryValidator) ProtoMessage()    {}
func (*QueryValidator) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6d324c07c7f430e, []int{1}
}

func (m *QueryValidator) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryValidator.Unmarshal(m, b)
}
func (m *QueryValidator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryValidator.Marshal(b, m, deterministic)
}
func (m *QueryValidator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidator.Merge(m, src)
}
func (m *QueryValidator) XXX_Size() int {
	return xxx_messageInfo_QueryValidator.Size(m)
}
func (m *QueryValidator) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidator.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidator proto.InternalMessageInfo

func (m *QueryValidator) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryValidator) GetValkey() string {
	if m != nil {
		return m.Valkey
	}
	return ""
}

func (m *QueryValidator) GetPubkey() string {
	if m != nil {
		return m.Pubkey
	}
	return ""
}

func (m *QueryValidator) GetProposer() string {
	if m != nil {
		return m.Proposer
	}
	return ""
}

func (m *QueryValidator) GetMoniker() string {
	if m != nil {
		return m.Moniker
	}
	return ""
}

func (m *QueryValidator) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *QueryValidator) GetRank() int64 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *QueryValidator) GetStreak() int64 {
	if m != nil {
		return m.Streak
	}
	return 0
}

func (m *QueryValidator) GetMischance() int64 {
	if m != nil {
		return m.Mischance
	}
	return 0
}

func (m *QueryValidator) GetIdentity() []*gov.IdentityRecord {
	if m != nil {
		return m.Identity
	}
	return nil
}

// ValidatorsResponse is response type for the Query/Validators RPC method
type ValidatorsResponse struct {
	// validators contains all the queried validators.
	Validators []*QueryValidator `protobuf:"bytes,1,rep,name=validators,proto3" json:"validators,omitempty"`
	Actors     []string          `protobuf:"bytes,2,rep,name=actors,proto3" json:"actors,omitempty"`
	// pagination defines the pagination in the response.
	Pagination           *base.PageResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ValidatorsResponse) Reset()         { *m = ValidatorsResponse{} }
func (m *ValidatorsResponse) String() string { return proto.CompactTextString(m) }
func (*ValidatorsResponse) ProtoMessage()    {}
func (*ValidatorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6d324c07c7f430e, []int{2}
}

func (m *ValidatorsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ValidatorsResponse.Unmarshal(m, b)
}
func (m *ValidatorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ValidatorsResponse.Marshal(b, m, deterministic)
}
func (m *ValidatorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorsResponse.Merge(m, src)
}
func (m *ValidatorsResponse) XXX_Size() int {
	return xxx_messageInfo_ValidatorsResponse.Size(m)
}
func (m *ValidatorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorsResponse proto.InternalMessageInfo

func (m *ValidatorsResponse) GetValidators() []*QueryValidator {
	if m != nil {
		return m.Validators
	}
	return nil
}

func (m *ValidatorsResponse) GetActors() []string {
	if m != nil {
		return m.Actors
	}
	return nil
}

func (m *ValidatorsResponse) GetPagination() *base.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*ValidatorsRequest)(nil), "kira.staking.ValidatorsRequest")
	proto.RegisterType((*QueryValidator)(nil), "kira.staking.QueryValidator")
	proto.RegisterType((*ValidatorsResponse)(nil), "kira.staking.ValidatorsResponse")
}

func init() {
	proto.RegisterFile("kira/staking/query.proto", fileDescriptor_a6d324c07c7f430e)
}

var fileDescriptor_a6d324c07c7f430e = []byte{
	// 687 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x3f, 0x6f, 0x13, 0x3f,
	0x18, 0xfe, 0x5d, 0x2e, 0x49, 0x53, 0xb7, 0xbf, 0x3f, 0xb5, 0xaa, 0x9f, 0x4e, 0x51, 0xa5, 0x1c,
	0x19, 0x20, 0xaa, 0x94, 0x73, 0x13, 0x40, 0x82, 0x0a, 0x21, 0x35, 0x5d, 0x40, 0x2c, 0xe5, 0x06,
	0x06, 0x16, 0xe4, 0x5c, 0x8c, 0x6b, 0xdd, 0xe5, 0xec, 0xda, 0xce, 0x41, 0x36, 0xd4, 0x8f, 0x50,
	0x26, 0x36, 0x24, 0xbe, 0x02, 0x1f, 0x80, 0x91, 0x9d, 0xbd, 0x13, 0x03, 0x1b, 0x7b, 0x27, 0x74,
	0xb6, 0x9b, 0x5c, 0x80, 0x0a, 0x21, 0x31, 0x9d, 0x9f, 0xf7, 0x79, 0xde, 0xd7, 0x7e, 0x9f, 0x7b,
	0x6d, 0x10, 0xa4, 0x4c, 0x62, 0xa4, 0x34, 0x4e, 0x59, 0x4e, 0xd1, 0xc9, 0x8c, 0xc8, 0x79, 0x24,
	0x24, 0xd7, 0x1c, 0x6e, 0x96, 0x4c, 0xe4, 0x98, 0xf6, 0x36, 0xe5, 0x94, 0x1b, 0x02, 0x95, 0x2b,
	0xab, 0x69, 0xef, 0x50, 0xce, 0x69, 0x46, 0x10, 0x16, 0x0c, 0xe1, 0x3c, 0xe7, 0x1a, 0x6b, 0xc6,
	0x73, 0xe5, 0xd8, 0x8e, 0x63, 0x0d, 0x1a, 0xcf, 0x9e, 0x23, 0xcd, 0xa6, 0x44, 0x69, 0x3c, 0x15,
	0x4e, 0x60, 0x3f, 0x49, 0x9f, 0x92, 0xbc, 0xcf, 0x05, 0xc9, 0xb1, 0x60, 0xc5, 0x10, 0x71, 0x61,
	0x8a, 0xfc, 0xa4, 0xe0, 0x6e, 0xc2, 0xd5, 0x94, 0x2b, 0x34, 0xc6, 0x8a, 0xd8, 0xb3, 0xa2, 0x62,
	0x30, 0x26, 0x1a, 0x0f, 0x90, 0xc0, 0x94, 0xe5, 0x46, 0xec, 0xb4, 0xd7, 0x4c, 0x63, 0x94, 0x17,
	0x88, 0x4d, 0x48, 0xae, 0x99, 0x9e, 0x3f, 0x93, 0x84, 0x32, 0xa5, 0x25, 0x96, 0x56, 0xd2, 0xfd,
	0x50, 0x03, 0x5b, 0x4f, 0x70, 0xc6, 0x26, 0x58, 0x73, 0xa9, 0x62, 0x72, 0x32, 0x23, 0x4a, 0xc3,
	0x00, 0xac, 0xe1, 0xc9, 0x44, 0x12, 0xa5, 0x02, 0x2f, 0xf4, 0x7a, 0xeb, 0xf1, 0x25, 0x84, 0xff,
	0x83, 0x66, 0x81, 0xb3, 0x94, 0xcc, 0x83, 0x9a, 0x21, 0x1c, 0x2a, 0xe3, 0x62, 0x36, 0x2e, 0xe3,
	0xbe, 0x8d, 0x5b, 0x54, 0x56, 0x9a, 0xf2, 0x9c, 0xa5, 0x44, 0x06, 0x75, 0x5b, 0xc9, 0xc1, 0x32,
	0x43, 0x69, 0xac, 0x67, 0x2a, 0x68, 0xd8, 0x0c, 0x8b, 0x60, 0x1b, 0xb4, 0x84, 0xe4, 0x82, 0x2b,
	0x22, 0x83, 0xa6, 0x61, 0x16, 0x18, 0xbe, 0xf2, 0x00, 0x58, 0x76, 0x19, 0xac, 0x85, 0x5e, 0x6f,
	0x63, 0x78, 0x3d, 0xb2, 0x96, 0x44, 0xa5, 0x25, 0x91, 0xfd, 0x7d, 0xce, 0x92, 0xe8, 0x08, 0x53,
	0xe2, 0x9a, 0x1a, 0xdd, 0xb9, 0x38, 0xef, 0xdc, 0xa2, 0x4c, 0x1f, 0xcf, 0xc6, 0x51, 0xc2, 0xa7,
	0xc8, 0x19, 0x69, 0x3f, 0x7d, 0x35, 0x49, 0x91, 0x9e, 0x0b, 0xa2, 0xdc, 0x00, 0x54, 0x32, 0xe3,
	0xca, 0x9e, 0xf0, 0x3f, 0xe0, 0xe3, 0x2c, 0x0b, 0x5a, 0xa1, 0xd7, 0x6b, 0xc5, 0xe5, 0xb2, 0xfb,
	0xbe, 0x06, 0xfe, 0x79, 0x5c, 0xe6, 0x2c, 0x7c, 0xfc, 0x83, 0xfe, 0x55, 0xdd, 0xa8, 0x7f, 0xe7,
	0x46, 0xc5, 0xdb, 0xc6, 0x55, 0xde, 0x36, 0x57, 0xbc, 0x85, 0xa0, 0x2e, 0x71, 0x9e, 0x1a, 0xe3,
	0xfc, 0xd8, 0xac, 0xad, 0x56, 0x12, 0x9c, 0x9a, 0x9e, 0xfc, 0xd8, 0x21, 0xb8, 0x03, 0xd6, 0xa7,
	0x4c, 0x25, 0xc7, 0x38, 0x4f, 0x48, 0xb0, 0x6e, 0xa8, 0x65, 0x00, 0xee, 0x83, 0xd6, 0xe5, 0x4c,
	0x05, 0x20, 0xf4, 0x7b, 0x1b, 0xc3, 0x20, 0x32, 0x97, 0x85, 0xf2, 0x22, 0x7a, 0xe8, 0x98, 0x98,
	0x24, 0x5c, 0x4e, 0x46, 0xf5, 0x8f, 0xe7, 0x9d, 0xbf, 0xe2, 0x85, 0x7e, 0xbf, 0xfe, 0xe5, 0x6d,
	0xc7, 0xeb, 0x7e, 0xf5, 0x00, 0xac, 0x4e, 0x9e, 0x12, 0x3c, 0x57, 0x04, 0xde, 0x03, 0xa0, 0x58,
	0x44, 0x03, 0xcf, 0x94, 0xde, 0x89, 0xaa, 0xf7, 0x30, 0x5a, 0x35, 0x3b, 0xae, 0xe8, 0xcb, 0x66,
	0x70, 0x62, 0x32, 0x6b, 0xa1, 0x5f, 0x36, 0x6e, 0x11, 0x3c, 0x5d, 0x1d, 0x1c, 0xdf, 0x0c, 0xce,
	0x8d, 0x5f, 0x0e, 0x8e, 0x3d, 0xd3, 0xe8, 0xee, 0xc5, 0x79, 0xe7, 0xf6, 0x6f, 0x4e, 0x8e, 0x4d,
	0xad, 0x8e, 0xce, 0xf0, 0x9d, 0x07, 0x1a, 0xe6, 0xec, 0xf0, 0x8d, 0x07, 0xc0, 0xb2, 0x77, 0xd8,
	0x59, 0xed, 0xef, 0x87, 0xfb, 0xd8, 0x0e, 0xaf, 0x16, 0xd8, 0x7d, 0xba, 0x0f, 0xce, 0x0e, 0xf6,
	0x40, 0xc3, 0x1c, 0x00, 0x6e, 0x9b, 0x4d, 0xc2, 0x83, 0x2c, 0x0b, 0x97, 0xca, 0xf6, 0x96, 0x8d,
	0x2e, 0x23, 0xd1, 0xe9, 0xa7, 0xcf, 0xaf, 0x6b, 0xff, 0xc2, 0xbf, 0xcd, 0xd3, 0x55, 0xe0, 0x8c,
	0x0b, 0x22, 0xd5, 0x48, 0x9f, 0x1d, 0xdc, 0x87, 0x8d, 0xa1, 0x3f, 0x88, 0xf6, 0x76, 0x3d, 0x4f,
	0x0e, 0xc1, 0x26, 0x8d, 0x8f, 0x0e, 0xfb, 0x14, 0x6b, 0xf2, 0x02, 0xcf, 0x61, 0xf7, 0x58, 0x6b,
	0xa1, 0xf6, 0x11, 0xaa, 0xf8, 0xf1, 0x88, 0x49, 0x7c, 0xc8, 0x25, 0x41, 0x2c, 0xd7, 0x44, 0xbe,
	0x7c, 0x3a, 0xb8, 0x9a, 0xb3, 0x0f, 0x61, 0xf9, 0xda, 0xa1, 0xea, 0xab, 0x3b, 0x6e, 0x9a, 0xf8,
	0xcd, 0x6f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x5d, 0x78, 0x3a, 0xcd, 0x8c, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Validators queries all validators that match the given status.
	Validators(ctx context.Context, in *ValidatorsRequest, opts ...grpc.CallOption) (*ValidatorsResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Validators(ctx context.Context, in *ValidatorsRequest, opts ...grpc.CallOption) (*ValidatorsResponse, error) {
	out := new(ValidatorsResponse)
	err := c.cc.Invoke(ctx, "/kira.staking.Query/Validators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Validators queries all validators that match the given status.
	Validators(context.Context, *ValidatorsRequest) (*ValidatorsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Validators(ctx context.Context, req *ValidatorsRequest) (*ValidatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validators not implemented")
}

func RegisterQueryServer(s *grpc.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Validators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Validators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.staking.Query/Validators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Validators(ctx, req.(*ValidatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kira.staking.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Validators",
			Handler:    _Query_Validators_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kira/staking/query.proto",
}
