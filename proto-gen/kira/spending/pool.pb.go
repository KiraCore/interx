// Code generated by protoc-gen-go. DO NOT EDIT.
// source: kira/spending/pool.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ClaimInfo struct {
	Account              string   `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	PoolName             string   `protobuf:"bytes,2,opt,name=pool_name,json=poolName,proto3" json:"pool_name,omitempty"`
	LastClaim            uint64   `protobuf:"varint,3,opt,name=last_claim,json=lastClaim,proto3" json:"last_claim,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClaimInfo) Reset()         { *m = ClaimInfo{} }
func (m *ClaimInfo) String() string { return proto.CompactTextString(m) }
func (*ClaimInfo) ProtoMessage()    {}
func (*ClaimInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6027931ab19c9a21, []int{0}
}

func (m *ClaimInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClaimInfo.Unmarshal(m, b)
}
func (m *ClaimInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClaimInfo.Marshal(b, m, deterministic)
}
func (m *ClaimInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimInfo.Merge(m, src)
}
func (m *ClaimInfo) XXX_Size() int {
	return xxx_messageInfo_ClaimInfo.Size(m)
}
func (m *ClaimInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimInfo proto.InternalMessageInfo

func (m *ClaimInfo) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *ClaimInfo) GetPoolName() string {
	if m != nil {
		return m.PoolName
	}
	return ""
}

func (m *ClaimInfo) GetLastClaim() uint64 {
	if m != nil {
		return m.LastClaim
	}
	return 0
}

type PermInfo struct {
	OwnerRoles           []uint64 `protobuf:"varint,1,rep,packed,name=owner_roles,json=ownerRoles,proto3" json:"owner_roles,omitempty"`
	OwnerAccounts        []string `protobuf:"bytes,2,rep,name=owner_accounts,json=ownerAccounts,proto3" json:"owner_accounts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PermInfo) Reset()         { *m = PermInfo{} }
func (m *PermInfo) String() string { return proto.CompactTextString(m) }
func (*PermInfo) ProtoMessage()    {}
func (*PermInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6027931ab19c9a21, []int{1}
}

func (m *PermInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PermInfo.Unmarshal(m, b)
}
func (m *PermInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PermInfo.Marshal(b, m, deterministic)
}
func (m *PermInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PermInfo.Merge(m, src)
}
func (m *PermInfo) XXX_Size() int {
	return xxx_messageInfo_PermInfo.Size(m)
}
func (m *PermInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PermInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PermInfo proto.InternalMessageInfo

func (m *PermInfo) GetOwnerRoles() []uint64 {
	if m != nil {
		return m.OwnerRoles
	}
	return nil
}

func (m *PermInfo) GetOwnerAccounts() []string {
	if m != nil {
		return m.OwnerAccounts
	}
	return nil
}

type SpendingPool struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// claim-start & claim-end - defines the exact time period (Unix timestamps) between which tokens can be claimed from the pool, allowing for a precise funds distribution.
	ClaimStart uint64 `protobuf:"varint,2,opt,name=claim_start,json=claimStart,proto3" json:"claim_start,omitempty"`
	ClaimEnd   uint64 `protobuf:"varint,3,opt,name=claim_end,json=claimEnd,proto3" json:"claim_end,omitempty"`
	Token      string `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
	// rate of distribution in the smallest token denomination per 1 second (this value can be a float number, smaller than actual denomination)
	Rate string `protobuf:"bytes,5,opt,name=rate,proto3" json:"rate,omitempty"`
	// pool specific % of owner accounts that must vote YES or NO for any of the pool proposals to be valid.
	VoteQuorum uint64 `protobuf:"varint,6,opt,name=vote_quorum,json=voteQuorum,proto3" json:"vote_quorum,omitempty"`
	// period of time in seconds that any of the pool proposals must last before passing or being rejected
	VotePeriod uint64 `protobuf:"varint,7,opt,name=vote_period,json=votePeriod,proto3" json:"vote_period,omitempty"`
	// period of time that must pass before any of the pool proposal is enacted
	VoteEnactment uint64 `protobuf:"varint,8,opt,name=vote_enactment,json=voteEnactment,proto3" json:"vote_enactment,omitempty"`
	// defines a list of accounts/roles controlling the spending pool via “governance-like” proposals
	Owners *PermInfo `protobuf:"bytes,9,opt,name=owners,proto3" json:"owners,omitempty"`
	// defines set of accounts/roles to which funds can be distributed
	Beneficiaries        *PermInfo `protobuf:"bytes,10,opt,name=beneficiaries,proto3" json:"beneficiaries,omitempty"`
	Balance              string    `protobuf:"bytes,11,opt,name=balance,proto3" json:"balance,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *SpendingPool) Reset()         { *m = SpendingPool{} }
func (m *SpendingPool) String() string { return proto.CompactTextString(m) }
func (*SpendingPool) ProtoMessage()    {}
func (*SpendingPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_6027931ab19c9a21, []int{2}
}

func (m *SpendingPool) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpendingPool.Unmarshal(m, b)
}
func (m *SpendingPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpendingPool.Marshal(b, m, deterministic)
}
func (m *SpendingPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpendingPool.Merge(m, src)
}
func (m *SpendingPool) XXX_Size() int {
	return xxx_messageInfo_SpendingPool.Size(m)
}
func (m *SpendingPool) XXX_DiscardUnknown() {
	xxx_messageInfo_SpendingPool.DiscardUnknown(m)
}

var xxx_messageInfo_SpendingPool proto.InternalMessageInfo

func (m *SpendingPool) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SpendingPool) GetClaimStart() uint64 {
	if m != nil {
		return m.ClaimStart
	}
	return 0
}

func (m *SpendingPool) GetClaimEnd() uint64 {
	if m != nil {
		return m.ClaimEnd
	}
	return 0
}

func (m *SpendingPool) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *SpendingPool) GetRate() string {
	if m != nil {
		return m.Rate
	}
	return ""
}

func (m *SpendingPool) GetVoteQuorum() uint64 {
	if m != nil {
		return m.VoteQuorum
	}
	return 0
}

func (m *SpendingPool) GetVotePeriod() uint64 {
	if m != nil {
		return m.VotePeriod
	}
	return 0
}

func (m *SpendingPool) GetVoteEnactment() uint64 {
	if m != nil {
		return m.VoteEnactment
	}
	return 0
}

func (m *SpendingPool) GetOwners() *PermInfo {
	if m != nil {
		return m.Owners
	}
	return nil
}

func (m *SpendingPool) GetBeneficiaries() *PermInfo {
	if m != nil {
		return m.Beneficiaries
	}
	return nil
}

func (m *SpendingPool) GetBalance() string {
	if m != nil {
		return m.Balance
	}
	return ""
}

func init() {
	proto.RegisterType((*ClaimInfo)(nil), "kira.spending.ClaimInfo")
	proto.RegisterType((*PermInfo)(nil), "kira.spending.PermInfo")
	proto.RegisterType((*SpendingPool)(nil), "kira.spending.SpendingPool")
}

func init() { proto.RegisterFile("kira/spending/pool.proto", fileDescriptor_6027931ab19c9a21) }

var fileDescriptor_6027931ab19c9a21 = []byte{
	// 499 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0x71, 0xe3, 0x36, 0xf1, 0x86, 0x70, 0x58, 0x55, 0x62, 0x55, 0x84, 0x1c, 0x45, 0x02,
	0x45, 0x08, 0x6c, 0x09, 0x6e, 0x95, 0x7a, 0xa0, 0xa5, 0x12, 0x15, 0x12, 0x4a, 0xdd, 0x0b, 0xe2,
	0x12, 0x6d, 0x9c, 0x89, 0x59, 0xc5, 0xbb, 0x63, 0x76, 0x37, 0x40, 0xdf, 0x86, 0xc7, 0xe1, 0x19,
	0x38, 0xe4, 0xcc, 0x81, 0x13, 0x4f, 0x80, 0x76, 0xec, 0x50, 0x7a, 0x41, 0xe2, 0xe4, 0xd9, 0x6f,
	0xfe, 0x99, 0xf9, 0x3d, 0x5e, 0x33, 0xb1, 0x56, 0x56, 0xe6, 0xae, 0x01, 0xb3, 0x54, 0xa6, 0xca,
	0x1b, 0xc4, 0x3a, 0x6b, 0x2c, 0x7a, 0xe4, 0xa3, 0x90, 0xc9, 0x76, 0x99, 0xa3, 0xb4, 0x42, 0xac,
	0x6a, 0xc8, 0x29, 0xb9, 0xd8, 0xac, 0x72, 0xaf, 0x34, 0x38, 0x2f, 0x75, 0xd3, 0xea, 0x8f, 0x0e,
	0x2b, 0xac, 0x90, 0xc2, 0x3c, 0x44, 0x2d, 0x9d, 0x48, 0x96, 0x9c, 0xd5, 0x52, 0xe9, 0x0b, 0xb3,
	0x42, 0x2e, 0x58, 0x5f, 0x96, 0x25, 0x6e, 0x8c, 0x17, 0xd1, 0x38, 0x9a, 0x26, 0xc5, 0xee, 0xc8,
	0x1f, 0xb0, 0x24, 0x8c, 0x9e, 0x1b, 0xa9, 0x41, 0xec, 0x51, 0x6e, 0x10, 0xc0, 0x5b, 0xa9, 0x81,
	0x3f, 0x64, 0xac, 0x96, 0xce, 0xcf, 0xcb, 0xd0, 0x48, 0xf4, 0xc6, 0xd1, 0x34, 0x2e, 0x92, 0x40,
	0xa8, 0xf3, 0xe4, 0x1d, 0x1b, 0xcc, 0xc0, 0xb6, 0x13, 0x52, 0x36, 0xc4, 0xcf, 0x06, 0xec, 0xdc,
	0x62, 0x0d, 0x4e, 0x44, 0xe3, 0xde, 0x34, 0x2e, 0x18, 0xa1, 0x22, 0x10, 0xfe, 0x88, 0xdd, 0x6b,
	0x05, 0xdd, 0x64, 0x27, 0xf6, 0xc6, 0xbd, 0x69, 0x52, 0x8c, 0x88, 0xbe, 0xec, 0xe0, 0x71, 0xfc,
	0xe3, 0x6b, 0x1a, 0x4d, 0x7e, 0xf6, 0xd8, 0xdd, 0xab, 0x6e, 0x01, 0x33, 0xc4, 0x9a, 0x73, 0x16,
	0x93, 0xc3, 0xd6, 0x3d, 0xc5, 0x61, 0x24, 0x19, 0x9b, 0x3b, 0x2f, 0xad, 0x27, 0xf3, 0x71, 0xc1,
	0x08, 0x5d, 0x05, 0x12, 0xde, 0xad, 0x15, 0x80, 0x59, 0x76, 0xee, 0x07, 0x04, 0xce, 0xcd, 0x92,
	0x1f, 0xb2, 0x7d, 0x8f, 0x6b, 0x30, 0x22, 0xa6, 0x96, 0xed, 0x81, 0x5f, 0xb2, 0xd8, 0x4a, 0x0f,
	0x62, 0x3f, 0xc0, 0xd3, 0x93, 0x6f, 0xdb, 0xf4, 0xce, 0xf7, 0x6d, 0xfa, 0xb8, 0x52, 0xfe, 0xc3,
	0x66, 0x91, 0x95, 0xa8, 0xf3, 0x12, 0x9d, 0x46, 0xd7, 0x3d, 0x9e, 0xb9, 0xe5, 0x3a, 0xf7, 0xd7,
	0x0d, 0xb8, 0xec, 0x15, 0x94, 0xbf, 0xb6, 0xe9, 0xf0, 0x5a, 0xea, 0xfa, 0x78, 0x12, 0x7a, 0x4c,
	0x0a, 0x6a, 0x15, 0x6c, 0x7e, 0x42, 0x0f, 0xf3, 0x8f, 0x1b, 0xb4, 0x1b, 0x2d, 0x0e, 0x5a, 0x9b,
	0x01, 0x5d, 0x12, 0xf9, 0x23, 0x68, 0xc0, 0x2a, 0x5c, 0x8a, 0xfe, 0x8d, 0x60, 0x46, 0x24, 0xac,
	0x8e, 0x04, 0x60, 0x64, 0xe9, 0x35, 0x18, 0x2f, 0x06, 0xa4, 0x19, 0x05, 0x7a, 0xbe, 0x83, 0x3c,
	0x67, 0x07, 0xb4, 0x4b, 0x27, 0x92, 0x71, 0x34, 0x1d, 0x3e, 0xbf, 0x9f, 0xdd, 0xba, 0x48, 0xd9,
	0xee, 0x5b, 0x15, 0x9d, 0x8c, 0x9f, 0xb0, 0xd1, 0x02, 0x0c, 0xac, 0x54, 0xa9, 0xa4, 0x55, 0xe0,
	0x04, 0xfb, 0x77, 0xdd, 0x6d, 0x35, 0x7f, 0xcd, 0xfa, 0x0b, 0x59, 0x4b, 0x53, 0x82, 0x18, 0xd2,
	0xba, 0xb2, 0xff, 0x58, 0xd7, 0x85, 0xf1, 0xc5, 0xae, 0xfc, 0xf4, 0xe9, 0xfb, 0x27, 0x7f, 0x95,
	0xbc, 0x51, 0x56, 0x9e, 0xa1, 0x85, 0xdc, 0xc1, 0x5a, 0xaa, 0xfc, 0xcb, 0xcd, 0x4f, 0x42, 0xa5,
	0x8b, 0x03, 0xba, 0xe0, 0x2f, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0x07, 0x24, 0xaa, 0x77, 0x42,
	0x03, 0x00, 0x00,
}
