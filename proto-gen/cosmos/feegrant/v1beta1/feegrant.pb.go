// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cosmos/feegrant/v1beta1/feegrant.proto

package feegrant

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// BasicAllowance implements Allowance with a one-time grant of tokens
// that optionally expires. The grantee can use up to SpendLimit to cover fees.
type BasicAllowance struct {
	// spend_limit specifies the maximum amount of tokens that can be spent
	// by this allowance and will be updated as tokens are spent. If it is
	// empty, there is no spend limit and any amount of coins can be spent.
	SpendLimit []*types.Coin `protobuf:"bytes,1,rep,name=spend_limit,json=spendLimit,proto3" json:"spend_limit,omitempty"`
	// expiration specifies an optional time when this allowance expires
	Expiration           *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=expiration,proto3" json:"expiration,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *BasicAllowance) Reset()         { *m = BasicAllowance{} }
func (m *BasicAllowance) String() string { return proto.CompactTextString(m) }
func (*BasicAllowance) ProtoMessage()    {}
func (*BasicAllowance) Descriptor() ([]byte, []int) {
	return fileDescriptor_7279582900c30aea, []int{0}
}

func (m *BasicAllowance) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BasicAllowance.Unmarshal(m, b)
}
func (m *BasicAllowance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BasicAllowance.Marshal(b, m, deterministic)
}
func (m *BasicAllowance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BasicAllowance.Merge(m, src)
}
func (m *BasicAllowance) XXX_Size() int {
	return xxx_messageInfo_BasicAllowance.Size(m)
}
func (m *BasicAllowance) XXX_DiscardUnknown() {
	xxx_messageInfo_BasicAllowance.DiscardUnknown(m)
}

var xxx_messageInfo_BasicAllowance proto.InternalMessageInfo

func (m *BasicAllowance) GetSpendLimit() []*types.Coin {
	if m != nil {
		return m.SpendLimit
	}
	return nil
}

func (m *BasicAllowance) GetExpiration() *timestamppb.Timestamp {
	if m != nil {
		return m.Expiration
	}
	return nil
}

// PeriodicAllowance extends Allowance to allow for both a maximum cap,
// as well as a limit per time period.
type PeriodicAllowance struct {
	// basic specifies a struct of `BasicAllowance`
	Basic *BasicAllowance `protobuf:"bytes,1,opt,name=basic,proto3" json:"basic,omitempty"`
	// period specifies the time duration in which period_spend_limit coins can
	// be spent before that allowance is reset
	Period *durationpb.Duration `protobuf:"bytes,2,opt,name=period,proto3" json:"period,omitempty"`
	// period_spend_limit specifies the maximum number of coins that can be spent
	// in the period
	PeriodSpendLimit []*types.Coin `protobuf:"bytes,3,rep,name=period_spend_limit,json=periodSpendLimit,proto3" json:"period_spend_limit,omitempty"`
	// period_can_spend is the number of coins left to be spent before the period_reset time
	PeriodCanSpend []*types.Coin `protobuf:"bytes,4,rep,name=period_can_spend,json=periodCanSpend,proto3" json:"period_can_spend,omitempty"`
	// period_reset is the time at which this period resets and a new one begins,
	// it is calculated from the start time of the first transaction after the
	// last period ended
	PeriodReset          *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=period_reset,json=periodReset,proto3" json:"period_reset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *PeriodicAllowance) Reset()         { *m = PeriodicAllowance{} }
func (m *PeriodicAllowance) String() string { return proto.CompactTextString(m) }
func (*PeriodicAllowance) ProtoMessage()    {}
func (*PeriodicAllowance) Descriptor() ([]byte, []int) {
	return fileDescriptor_7279582900c30aea, []int{1}
}

func (m *PeriodicAllowance) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeriodicAllowance.Unmarshal(m, b)
}
func (m *PeriodicAllowance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeriodicAllowance.Marshal(b, m, deterministic)
}
func (m *PeriodicAllowance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeriodicAllowance.Merge(m, src)
}
func (m *PeriodicAllowance) XXX_Size() int {
	return xxx_messageInfo_PeriodicAllowance.Size(m)
}
func (m *PeriodicAllowance) XXX_DiscardUnknown() {
	xxx_messageInfo_PeriodicAllowance.DiscardUnknown(m)
}

var xxx_messageInfo_PeriodicAllowance proto.InternalMessageInfo

func (m *PeriodicAllowance) GetBasic() *BasicAllowance {
	if m != nil {
		return m.Basic
	}
	return nil
}

func (m *PeriodicAllowance) GetPeriod() *durationpb.Duration {
	if m != nil {
		return m.Period
	}
	return nil
}

func (m *PeriodicAllowance) GetPeriodSpendLimit() []*types.Coin {
	if m != nil {
		return m.PeriodSpendLimit
	}
	return nil
}

func (m *PeriodicAllowance) GetPeriodCanSpend() []*types.Coin {
	if m != nil {
		return m.PeriodCanSpend
	}
	return nil
}

func (m *PeriodicAllowance) GetPeriodReset() *timestamppb.Timestamp {
	if m != nil {
		return m.PeriodReset
	}
	return nil
}

// AllowedMsgAllowance creates allowance only for specified message types.
type AllowedMsgAllowance struct {
	// allowance can be any of basic and filtered fee allowance.
	Allowance *anypb.Any `protobuf:"bytes,1,opt,name=allowance,proto3" json:"allowance,omitempty"`
	// allowed_messages are the messages for which the grantee has the access.
	AllowedMessages      []string `protobuf:"bytes,2,rep,name=allowed_messages,json=allowedMessages,proto3" json:"allowed_messages,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AllowedMsgAllowance) Reset()         { *m = AllowedMsgAllowance{} }
func (m *AllowedMsgAllowance) String() string { return proto.CompactTextString(m) }
func (*AllowedMsgAllowance) ProtoMessage()    {}
func (*AllowedMsgAllowance) Descriptor() ([]byte, []int) {
	return fileDescriptor_7279582900c30aea, []int{2}
}

func (m *AllowedMsgAllowance) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllowedMsgAllowance.Unmarshal(m, b)
}
func (m *AllowedMsgAllowance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllowedMsgAllowance.Marshal(b, m, deterministic)
}
func (m *AllowedMsgAllowance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllowedMsgAllowance.Merge(m, src)
}
func (m *AllowedMsgAllowance) XXX_Size() int {
	return xxx_messageInfo_AllowedMsgAllowance.Size(m)
}
func (m *AllowedMsgAllowance) XXX_DiscardUnknown() {
	xxx_messageInfo_AllowedMsgAllowance.DiscardUnknown(m)
}

var xxx_messageInfo_AllowedMsgAllowance proto.InternalMessageInfo

func (m *AllowedMsgAllowance) GetAllowance() *anypb.Any {
	if m != nil {
		return m.Allowance
	}
	return nil
}

func (m *AllowedMsgAllowance) GetAllowedMessages() []string {
	if m != nil {
		return m.AllowedMessages
	}
	return nil
}

// Grant is stored in the KVStore to record a grant with full context
type Grant struct {
	// granter is the address of the user granting an allowance of their funds.
	Granter string `protobuf:"bytes,1,opt,name=granter,proto3" json:"granter,omitempty"`
	// grantee is the address of the user being granted an allowance of another user's funds.
	Grantee string `protobuf:"bytes,2,opt,name=grantee,proto3" json:"grantee,omitempty"`
	// allowance can be any of basic and filtered fee allowance.
	Allowance            *anypb.Any `protobuf:"bytes,3,opt,name=allowance,proto3" json:"allowance,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Grant) Reset()         { *m = Grant{} }
func (m *Grant) String() string { return proto.CompactTextString(m) }
func (*Grant) ProtoMessage()    {}
func (*Grant) Descriptor() ([]byte, []int) {
	return fileDescriptor_7279582900c30aea, []int{3}
}

func (m *Grant) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Grant.Unmarshal(m, b)
}
func (m *Grant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Grant.Marshal(b, m, deterministic)
}
func (m *Grant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Grant.Merge(m, src)
}
func (m *Grant) XXX_Size() int {
	return xxx_messageInfo_Grant.Size(m)
}
func (m *Grant) XXX_DiscardUnknown() {
	xxx_messageInfo_Grant.DiscardUnknown(m)
}

var xxx_messageInfo_Grant proto.InternalMessageInfo

func (m *Grant) GetGranter() string {
	if m != nil {
		return m.Granter
	}
	return ""
}

func (m *Grant) GetGrantee() string {
	if m != nil {
		return m.Grantee
	}
	return ""
}

func (m *Grant) GetAllowance() *anypb.Any {
	if m != nil {
		return m.Allowance
	}
	return nil
}

func init() {
	proto.RegisterType((*BasicAllowance)(nil), "cosmos.feegrant.v1beta1.BasicAllowance")
	proto.RegisterType((*PeriodicAllowance)(nil), "cosmos.feegrant.v1beta1.PeriodicAllowance")
	proto.RegisterType((*AllowedMsgAllowance)(nil), "cosmos.feegrant.v1beta1.AllowedMsgAllowance")
	proto.RegisterType((*Grant)(nil), "cosmos.feegrant.v1beta1.Grant")
}

func init() {
	proto.RegisterFile("cosmos/feegrant/v1beta1/feegrant.proto", fileDescriptor_7279582900c30aea)
}

var fileDescriptor_7279582900c30aea = []byte{
	// 538 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xbf, 0x6f, 0xd3, 0x40,
	0x14, 0xae, 0xeb, 0xa4, 0x90, 0x0b, 0x94, 0xc6, 0x14, 0xe1, 0x64, 0xc0, 0x51, 0x07, 0x9a, 0x0e,
	0x3d, 0xd3, 0xb2, 0x95, 0x85, 0x3a, 0x40, 0x85, 0x44, 0x25, 0x64, 0x98, 0x58, 0xac, 0xb3, 0xfd,
	0x6a, 0x4e, 0xd8, 0x3e, 0xcb, 0x77, 0x81, 0x66, 0x65, 0x62, 0x64, 0x64, 0x42, 0xcc, 0xcc, 0xfc,
	0x11, 0x88, 0x11, 0x76, 0x3a, 0xf0, 0x8f, 0x20, 0xdf, 0x9d, 0x9d, 0x90, 0xf0, 0x43, 0x42, 0x9d,
	0xe2, 0xf7, 0xe3, 0xfb, 0xde, 0xf7, 0xbd, 0x77, 0x0a, 0xba, 0x19, 0x31, 0x9e, 0x31, 0xee, 0x9e,
	0x00, 0x24, 0x25, 0xc9, 0x85, 0xfb, 0x72, 0x2f, 0x04, 0x41, 0xf6, 0x9a, 0x04, 0x2e, 0x4a, 0x26,
	0x98, 0x75, 0x5d, 0xf5, 0xe1, 0x26, 0xad, 0xfb, 0x06, 0x9b, 0x09, 0x4b, 0x98, 0xec, 0x71, 0xab,
	0x2f, 0xd5, 0x3e, 0xe8, 0x27, 0x8c, 0x25, 0x29, 0xb8, 0x32, 0x0a, 0x27, 0x27, 0x2e, 0xc9, 0xa7,
	0x75, 0x49, 0x31, 0x05, 0x0a, 0xa3, 0x69, 0x55, 0xe9, 0x86, 0x16, 0x13, 0x12, 0x0e, 0x8d, 0x90,
	0x88, 0xd1, 0x5c, 0xd7, 0x9d, 0x45, 0x56, 0x41, 0x33, 0xe0, 0x82, 0x64, 0x45, 0x4d, 0xb0, 0xd8,
	0x10, 0x4f, 0x4a, 0x22, 0x28, 0xd3, 0x04, 0x5b, 0xdf, 0x0c, 0xb4, 0xee, 0x11, 0x4e, 0xa3, 0xc3,
	0x34, 0x65, 0xaf, 0x48, 0x1e, 0x81, 0x95, 0xa2, 0x2e, 0x2f, 0x20, 0x8f, 0x83, 0x94, 0x66, 0x54,
	0xd8, 0xc6, 0xd0, 0x1c, 0x75, 0xf7, 0xfb, 0x58, 0xeb, 0xaa, 0x94, 0xd4, 0x56, 0xf1, 0x98, 0xd1,
	0xdc, 0xbb, 0xf5, 0xf9, 0xbb, 0xb3, 0xf2, 0xf1, 0xcc, 0x19, 0x25, 0x54, 0x3c, 0x9f, 0x84, 0x38,
	0x62, 0x99, 0x36, 0xa1, 0x7f, 0x76, 0x79, 0xfc, 0xc2, 0x15, 0xd3, 0x02, 0xb8, 0x04, 0x70, 0x1f,
	0x49, 0xfe, 0x47, 0x15, 0xbd, 0x75, 0x17, 0x21, 0x38, 0x2d, 0xa8, 0x12, 0x65, 0xaf, 0x0e, 0x8d,
	0x51, 0x77, 0x7f, 0x80, 0x95, 0x6a, 0x5c, 0xab, 0xc6, 0x4f, 0x6b, 0x5b, 0x5e, 0xeb, 0xed, 0x99,
	0x63, 0xf8, 0x73, 0x98, 0x83, 0xde, 0xd7, 0x4f, 0xbb, 0x97, 0x1f, 0x00, 0x34, 0x0e, 0x1e, 0x6e,
	0xfd, 0x30, 0x51, 0xef, 0x31, 0x94, 0x94, 0xc5, 0xf3, 0xc6, 0xc6, 0xa8, 0x1d, 0x56, 0x56, 0x6d,
	0x43, 0x4e, 0xd9, 0xc6, 0x7f, 0xb8, 0x20, 0xfe, 0x75, 0x21, 0x5e, 0xab, 0x32, 0xe8, 0x2b, 0xac,
	0x75, 0x07, 0xad, 0x15, 0x92, 0x59, 0x6b, 0xed, 0x2f, 0x69, 0xbd, 0xa7, 0x37, 0xec, 0x5d, 0xac,
	0x70, 0xef, 0x2a, 0xb9, 0x1a, 0x62, 0x4d, 0x91, 0xa5, 0xbe, 0x82, 0xf9, 0x0d, 0x9b, 0xe7, 0xbf,
	0xe1, 0x0d, 0x35, 0xe6, 0xc9, 0x6c, 0xcf, 0x13, 0xa4, 0x73, 0x41, 0x44, 0x72, 0x35, 0xde, 0x6e,
	0x9d, 0xff, 0xe0, 0x75, 0x35, 0x64, 0x4c, 0x72, 0x39, 0xdb, 0x3a, 0x42, 0x97, 0xf4, 0xd8, 0x12,
	0x38, 0x08, 0xbb, 0xfd, 0xcf, 0x03, 0xcb, 0xad, 0xc9, 0x23, 0x77, 0x15, 0xd2, 0xaf, 0x80, 0xbf,
	0xbb, 0xf2, 0x7b, 0x03, 0x5d, 0x95, 0x21, 0xc4, 0xc7, 0x3c, 0x99, 0xdd, 0xf9, 0x3e, 0xea, 0x90,
	0x3a, 0xd0, 0xb7, 0xde, 0x5c, 0x1a, 0x78, 0x98, 0x4f, 0xbd, 0xde, 0x97, 0x45, 0x4e, 0x7f, 0x86,
	0xb4, 0x76, 0xd0, 0x06, 0x51, 0xec, 0x41, 0x06, 0x9c, 0x93, 0x04, 0xb8, 0xbd, 0x3a, 0x34, 0x47,
	0x1d, 0xff, 0x8a, 0xce, 0x1f, 0xeb, 0xf4, 0xc1, 0xb5, 0x37, 0x1f, 0x9c, 0x95, 0x65, 0x81, 0xaf,
	0x0d, 0xd4, 0x3e, 0xaa, 0x5e, 0x96, 0x65, 0xa3, 0x0b, 0xf2, 0x89, 0x41, 0x29, 0x05, 0x75, 0xfc,
	0x3a, 0x9c, 0x55, 0x40, 0x3e, 0xa8, 0xa6, 0xb2, 0x60, 0xc3, 0xfc, 0x5f, 0x1b, 0xde, 0xce, 0xb3,
	0xed, 0xbf, 0x5e, 0xef, 0xb4, 0xf9, 0x63, 0x0b, 0xd7, 0x24, 0xed, 0xed, 0x9f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xf3, 0xfa, 0x2b, 0x55, 0x03, 0x05, 0x00, 0x00,
}
