// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cosmos/staking/v1beta1/authz.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// AuthorizationType defines the type of staking module authorization type
//
// Since: cosmos-sdk 0.43
type AuthorizationType int32

const (
	// AUTHORIZATION_TYPE_UNSPECIFIED specifies an unknown authorization type
	AuthorizationType_AUTHORIZATION_TYPE_UNSPECIFIED AuthorizationType = 0
	// AUTHORIZATION_TYPE_DELEGATE defines an authorization type for Msg/Delegate
	AuthorizationType_AUTHORIZATION_TYPE_DELEGATE AuthorizationType = 1
	// AUTHORIZATION_TYPE_UNDELEGATE defines an authorization type for Msg/Undelegate
	AuthorizationType_AUTHORIZATION_TYPE_UNDELEGATE AuthorizationType = 2
	// AUTHORIZATION_TYPE_REDELEGATE defines an authorization type for Msg/BeginRedelegate
	AuthorizationType_AUTHORIZATION_TYPE_REDELEGATE AuthorizationType = 3
)

var AuthorizationType_name = map[int32]string{
	0: "AUTHORIZATION_TYPE_UNSPECIFIED",
	1: "AUTHORIZATION_TYPE_DELEGATE",
	2: "AUTHORIZATION_TYPE_UNDELEGATE",
	3: "AUTHORIZATION_TYPE_REDELEGATE",
}

var AuthorizationType_value = map[string]int32{
	"AUTHORIZATION_TYPE_UNSPECIFIED": 0,
	"AUTHORIZATION_TYPE_DELEGATE":    1,
	"AUTHORIZATION_TYPE_UNDELEGATE":  2,
	"AUTHORIZATION_TYPE_REDELEGATE":  3,
}

func (x AuthorizationType) String() string {
	return proto.EnumName(AuthorizationType_name, int32(x))
}

func (AuthorizationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d6d8cdbc6f4432f0, []int{0}
}

// StakeAuthorization defines authorization for delegate/undelegate/redelegate.
//
// Since: cosmos-sdk 0.43
type StakeAuthorization struct {
	// max_tokens specifies the maximum amount of tokens can be delegate to a validator. If it is
	// empty, there is no spend limit and any amount of coins can be delegated.
	MaxTokens *types.Coin `protobuf:"bytes,1,opt,name=max_tokens,json=maxTokens,proto3" json:"max_tokens,omitempty"`
	// validators is the oneof that represents either allow_list or deny_list
	//
	// Types that are valid to be assigned to Validators:
	//	*StakeAuthorization_AllowList
	//	*StakeAuthorization_DenyList
	Validators isStakeAuthorization_Validators `protobuf_oneof:"validators"`
	// authorization_type defines one of AuthorizationType.
	AuthorizationType    AuthorizationType `protobuf:"varint,4,opt,name=authorization_type,json=authorizationType,proto3,enum=cosmos.staking.v1beta1.AuthorizationType" json:"authorization_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *StakeAuthorization) Reset()         { *m = StakeAuthorization{} }
func (m *StakeAuthorization) String() string { return proto.CompactTextString(m) }
func (*StakeAuthorization) ProtoMessage()    {}
func (*StakeAuthorization) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6d8cdbc6f4432f0, []int{0}
}

func (m *StakeAuthorization) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StakeAuthorization.Unmarshal(m, b)
}
func (m *StakeAuthorization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StakeAuthorization.Marshal(b, m, deterministic)
}
func (m *StakeAuthorization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakeAuthorization.Merge(m, src)
}
func (m *StakeAuthorization) XXX_Size() int {
	return xxx_messageInfo_StakeAuthorization.Size(m)
}
func (m *StakeAuthorization) XXX_DiscardUnknown() {
	xxx_messageInfo_StakeAuthorization.DiscardUnknown(m)
}

var xxx_messageInfo_StakeAuthorization proto.InternalMessageInfo

func (m *StakeAuthorization) GetMaxTokens() *types.Coin {
	if m != nil {
		return m.MaxTokens
	}
	return nil
}

type isStakeAuthorization_Validators interface {
	isStakeAuthorization_Validators()
}

type StakeAuthorization_AllowList struct {
	AllowList *StakeAuthorization_Validators `protobuf:"bytes,2,opt,name=allow_list,json=allowList,proto3,oneof"`
}

type StakeAuthorization_DenyList struct {
	DenyList *StakeAuthorization_Validators `protobuf:"bytes,3,opt,name=deny_list,json=denyList,proto3,oneof"`
}

func (*StakeAuthorization_AllowList) isStakeAuthorization_Validators() {}

func (*StakeAuthorization_DenyList) isStakeAuthorization_Validators() {}

func (m *StakeAuthorization) GetValidators() isStakeAuthorization_Validators {
	if m != nil {
		return m.Validators
	}
	return nil
}

func (m *StakeAuthorization) GetAllowList() *StakeAuthorization_Validators {
	if x, ok := m.GetValidators().(*StakeAuthorization_AllowList); ok {
		return x.AllowList
	}
	return nil
}

func (m *StakeAuthorization) GetDenyList() *StakeAuthorization_Validators {
	if x, ok := m.GetValidators().(*StakeAuthorization_DenyList); ok {
		return x.DenyList
	}
	return nil
}

func (m *StakeAuthorization) GetAuthorizationType() AuthorizationType {
	if m != nil {
		return m.AuthorizationType
	}
	return AuthorizationType_AUTHORIZATION_TYPE_UNSPECIFIED
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*StakeAuthorization) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*StakeAuthorization_AllowList)(nil),
		(*StakeAuthorization_DenyList)(nil),
	}
}

// Validators defines list of validator addresses.
type StakeAuthorization_Validators struct {
	Address              []string `protobuf:"bytes,1,rep,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StakeAuthorization_Validators) Reset()         { *m = StakeAuthorization_Validators{} }
func (m *StakeAuthorization_Validators) String() string { return proto.CompactTextString(m) }
func (*StakeAuthorization_Validators) ProtoMessage()    {}
func (*StakeAuthorization_Validators) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6d8cdbc6f4432f0, []int{0, 0}
}

func (m *StakeAuthorization_Validators) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StakeAuthorization_Validators.Unmarshal(m, b)
}
func (m *StakeAuthorization_Validators) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StakeAuthorization_Validators.Marshal(b, m, deterministic)
}
func (m *StakeAuthorization_Validators) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakeAuthorization_Validators.Merge(m, src)
}
func (m *StakeAuthorization_Validators) XXX_Size() int {
	return xxx_messageInfo_StakeAuthorization_Validators.Size(m)
}
func (m *StakeAuthorization_Validators) XXX_DiscardUnknown() {
	xxx_messageInfo_StakeAuthorization_Validators.DiscardUnknown(m)
}

var xxx_messageInfo_StakeAuthorization_Validators proto.InternalMessageInfo

func (m *StakeAuthorization_Validators) GetAddress() []string {
	if m != nil {
		return m.Address
	}
	return nil
}

func init() {
	proto.RegisterEnum("cosmos.staking.v1beta1.AuthorizationType", AuthorizationType_name, AuthorizationType_value)
	proto.RegisterType((*StakeAuthorization)(nil), "cosmos.staking.v1beta1.StakeAuthorization")
	proto.RegisterType((*StakeAuthorization_Validators)(nil), "cosmos.staking.v1beta1.StakeAuthorization.Validators")
}

func init() { proto.RegisterFile("cosmos/staking/v1beta1/authz.proto", fileDescriptor_d6d8cdbc6f4432f0) }

var fileDescriptor_d6d8cdbc6f4432f0 = []byte{
	// 432 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0x86, 0xeb, 0x1a, 0x01, 0x3e, 0x5c, 0xd4, 0x8c, 0x10, 0x72, 0x83, 0x68, 0x4b, 0x16, 0x10,
	0x2e, 0x1d, 0xab, 0x45, 0x6c, 0xd8, 0x39, 0xad, 0xa1, 0x96, 0xaa, 0xb6, 0x72, 0xdd, 0x0a, 0xba,
	0xb1, 0xc6, 0xf1, 0xc8, 0x19, 0xf9, 0x32, 0x91, 0x67, 0x52, 0x92, 0x3c, 0x0c, 0x0f, 0xc0, 0x9a,
	0xc7, 0x60, 0xc5, 0x0b, 0xf0, 0x2a, 0xc8, 0x63, 0xc7, 0x10, 0x92, 0xb0, 0xe9, 0xca, 0x97, 0xf3,
	0xcd, 0xf7, 0x9f, 0x63, 0x1d, 0x43, 0xa7, 0xcf, 0x45, 0xc6, 0x85, 0x25, 0x24, 0x49, 0x58, 0x1e,
	0x5b, 0xd7, 0x7b, 0x21, 0x95, 0x64, 0xcf, 0x22, 0x23, 0x39, 0x98, 0xe2, 0x61, 0xc1, 0x25, 0x47,
	0x8f, 0x2b, 0x06, 0xd7, 0x0c, 0xae, 0x99, 0xf6, 0xa3, 0x98, 0xc7, 0x5c, 0x21, 0x56, 0x79, 0x57,
	0xd1, 0xed, 0xcd, 0x8a, 0x0e, 0xaa, 0x42, 0x7d, 0xb4, 0x2a, 0x6d, 0xd5, 0x61, 0x21, 0x11, 0xb4,
	0x49, 0xea, 0x73, 0x96, 0x57, 0xf5, 0xce, 0x0f, 0x1d, 0xd0, 0xb9, 0x24, 0x09, 0xb5, 0x47, 0x72,
	0xc0, 0x0b, 0x36, 0x25, 0x92, 0xf1, 0x1c, 0x51, 0x80, 0x8c, 0x8c, 0x03, 0xc9, 0x13, 0x9a, 0x0b,
	0x53, 0xdb, 0xd1, 0xba, 0xf7, 0xf6, 0x37, 0x71, 0x6d, 0x2e, 0x5d, 0xb3, 0x8e, 0xf0, 0x01, 0x67,
	0x79, 0xef, 0xf5, 0xb7, 0x5f, 0xdb, 0x2f, 0x62, 0x26, 0x07, 0xa3, 0x10, 0xf7, 0x79, 0x56, 0xb7,
	0x50, 0x5f, 0x76, 0x45, 0x94, 0x58, 0x72, 0x32, 0xa4, 0x42, 0xc1, 0x9e, 0x91, 0x91, 0xb1, 0xaf,
	0xc4, 0xe8, 0x12, 0x80, 0xa4, 0x29, 0xff, 0x12, 0xa4, 0x4c, 0x48, 0x73, 0x5d, 0xc5, 0xbc, 0xc3,
	0xcb, 0x67, 0xc7, 0x8b, 0x6d, 0xe2, 0x4b, 0x92, 0xb2, 0x88, 0x48, 0x5e, 0x88, 0xa3, 0x35, 0xcf,
	0x50, 0xaa, 0x63, 0x26, 0x24, 0xf2, 0xc1, 0x88, 0x68, 0x3e, 0xa9, 0xb4, 0xfa, 0xcd, 0xb4, 0x77,
	0x4b, 0x93, 0xb2, 0x7e, 0x02, 0x44, 0xfe, 0xe6, 0x82, 0x72, 0x28, 0xf3, 0xd6, 0x8e, 0xd6, 0x7d,
	0xb8, 0xff, 0x72, 0x95, 0x7e, 0xce, 0xec, 0x4f, 0x86, 0xd4, 0x6b, 0x91, 0x7f, 0x5f, 0xb5, 0x9f,
	0x03, 0xfc, 0xc9, 0x44, 0x26, 0xdc, 0x21, 0x51, 0x54, 0x50, 0x51, 0x7e, 0x79, 0xbd, 0x6b, 0x78,
	0xb3, 0xc7, 0xf7, 0xad, 0x9f, 0xdf, 0x77, 0x1f, 0xcc, 0x19, 0x7b, 0xf7, 0x01, 0xae, 0x9b, 0xa3,
	0xaf, 0xbe, 0x6a, 0xd0, 0x5a, 0x48, 0x44, 0x1d, 0xd8, 0xb2, 0x2f, 0xfc, 0xa3, 0x53, 0xcf, 0xbd,
	0xb2, 0x7d, 0xf7, 0xf4, 0x24, 0xf0, 0x3f, 0x9f, 0x39, 0xc1, 0xc5, 0xc9, 0xf9, 0x99, 0x73, 0xe0,
	0x7e, 0x70, 0x9d, 0xc3, 0x8d, 0x35, 0xb4, 0x0d, 0x4f, 0x96, 0x30, 0x87, 0xce, 0xb1, 0xf3, 0xd1,
	0xf6, 0x9d, 0x0d, 0x0d, 0x3d, 0x83, 0xa7, 0x4b, 0x25, 0x0d, 0xb2, 0xbe, 0x02, 0xf1, 0x9c, 0x06,
	0xd1, 0x7b, 0xf8, 0xea, 0xcd, 0x7f, 0xf7, 0x64, 0xdc, 0xfc, 0x16, 0x6a, 0x63, 0xc2, 0xdb, 0x6a,
	0x4d, 0xdf, 0xfe, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x26, 0xdc, 0xfb, 0xc4, 0x35, 0x03, 0x00, 0x00,
}
