name: INTERX Build & Release

on:
  push:
    branches: [ master, dev, v* ]
  pull_request:
    branches: [ master, dev, v* ]

jobs:
  # isolate signing & repo cloning from docker image
  setup:
    name: Repo Setup
    runs-on: ubuntu-20.04
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
          - name: Install cosign
            uses: sigstore/cosign-installer@v2.1.0
            with:
              cosign-release: 'v1.6.0'
          - name: Checkout repository
            uses: actions/checkout@v3.0.0
          - name: Verify repo content
            run: |
              echo "(current dir): $PWD" && ls -l
              zip -r src.zip .
          - name: Uploading artifacts
            uses: actions/upload-artifact@v3.0.0
            with:
              name: src
              path: ./src.zip
  build:
    name: Repo Build
    runs-on: ubuntu-20.04
    permissions:
      contents: read
      packages: write
      id-token: write
    needs: [setup]
    container: 
      image: ghcr.io/kiracore/docker/base-image:v0.0.2.0
    steps:
          - name: Checking dependency versions
            run: |
              . /etc/profile && echo "Utils Version: $(utilsVersion)"
              go version
              CDHelper version
              flutter --version
              dart --version
              echo "ENVS: $(env)"
              echo "HOME: $HOME"
              echo " PWD: $PWD"
          - name: Download artifacts
            uses: actions/download-artifact@v3.0.0
            with:
              name: src
              path: /self/home/src.zip
          - name: Testing INTERX
            working-directory: /self/home
            run: |
              echo "(current dir): $PWD" && ls -l
              chmod 555 $PWD/src.zip
              unzip $PWD/src.zip
              chmod -Rv 555 $PWD/scripts
              make install
              interxd version
          - name: Publishing INTERX binaries
            working-directory: /self/home
            run: |
              make publish
              ls -l