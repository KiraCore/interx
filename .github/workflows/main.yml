name: INTERX Build & Release

on:
  push:
    branches: [ v* ]
  pull_request:
    branches: [ v* ]

jobs:
  # isolate signing & repo cloning from docker image
  setup:
    name: Repo Setup
    runs-on: ubuntu-20.04
    permissions:
      contents: read
      packages: write
      id-token: write
      pull-requests: write
    steps:
          - name: Install cosign
            uses: sigstore/cosign-installer@v2.1.0
            with:
              cosign-release: 'v1.6.0'
          - name: Checkout repository
            uses: actions/checkout@v3.0.0
          - name: Verify repo content
            run: |
              echo "(current dir): $PWD" && ls -l
              cd ../ && tar -czvf src.tar.gz -C ./interx . && cp ./src.tar.gz ./interx/src.tar.gz
          - name: Uploading artifacts
            uses: actions/upload-artifact@v3.0.0
            with:
              name: interx-src
              path: ./src.tar.gz
  build:
    name: Repo Build
    runs-on: ubuntu-20.04
    permissions:
      contents: read
      packages: write
      id-token: write
      pull-requests: write
    needs: [setup]
    container: 
      image: ghcr.io/kiracore/docker/base-image:v0.0.2.0
    steps:
          - name: Checking dependency versions
            run: |
              . /etc/profile && echo "Utils Version: $(utilsVersion)"
              go version
              CDHelper version
              flutter --version
              dart --version
              echo "ENVS: $(env)"
              echo "HOME: $HOME"
              echo " PWD: $PWD"
          - name: Download artifacts
            uses: actions/download-artifact@v3.0.0
            with:
              name: interx-src
          - name: Testing INTERX
            run: |
              echo "(current dir): $PWD" && ls -l $PWD
              tar xvf ./src.tar.gz
              chmod -Rv 555 $PWD/scripts
              make install
              interxd version
          - name: Publishing INTERX binaries
            run: |
              make publish
              cp -fv $PWD/RELEASE.md $PWD/bin
              chmod -Rv 555 $PWD/bin
              tar -czvf deb.tar.gz -C $PWD/bin .
          - name: Uploading artifacts
            uses: actions/upload-artifact@v3.0.0
            with:
              name: interx-bin-deb
              path: ./deb.tar.gz
  release:
    name: Build Release
    runs-on: ubuntu-20.04
    needs: [build]
    permissions:
      contents: read
      packages: write
      id-token: write
      pull-requests: write
    steps:
          - name: Download artifacts
            uses: actions/download-artifact@v3.0.0
            with:
              name: interx-bin-deb
          - name: Inspecting & organizing artifacts
            run: |
              echo "(current dir): $PWD" && ls -l
              tar xvf ./deb.tar.gz
              chmod -Rv 777 ./
              echo "" >> ./RELEASE.md && echo "--- CHECKSUMS SHA256 START ---" >> ./RELEASE.md
              echo " interx_darwin_amd64.deb: $(sha256sum ./interx_darwin_amd64.deb | awk '{ print $1 }')" >> ./RELEASE.md
              echo " interx_darwin_arm64.deb: $(sha256sum ./interx_darwin_arm64.deb | awk '{ print $1 }')" >> ./RELEASE.md
              echo "  interx_linux_amd64.deb: $(sha256sum ./interx_linux_amd64.deb | awk '{ print $1 }')" >> ./RELEASE.md
              echo "  interx_linux_arm64.deb: $(sha256sum ./interx_linux_arm64.deb | awk '{ print $1 }')" >> ./RELEASE.md
              echo "interx_windows_amd64.exe: $(sha256sum ./interx_windows_amd64.exe | awk '{ print $1 }')" >> ./RELEASE.md
              echo "interx_windows_arm64.exe: $(sha256sum ./interx_windows_arm64.exe | awk '{ print $1 }')" >> ./RELEASE.md
              echo "--- CHECKSUMS SHA256 END ---" >> ./RELEASE.md
          # Branch name is also a version of the release
          # ref: https://stackoverflow.com/questions/58033366/how-to-get-the-current-branch-within-github-actions
          - name: Extract branch name on push
            if: github.event_name != 'pull_request'
            shell: bash
            run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV
          - name: Extract branch name on pull request
            if: github.event_name == 'pull_request'
            shell: bash
            run: echo "BRANCH_NAME=$(echo ${GITHUB_HEAD_REF} | tr / -)" >> $GITHUB_ENV
          - name: Print branch name
            run: |
              echo "Branch name: ${{ env.BRANCH_NAME }}"
          - name: Publish release
            uses: softprops/action-gh-release@v0.1.14
            env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            with:
              body_path: RELEASE.md
              tag_name: ${{ env.BRANCH_NAME }}
              release_name: INTERX ${{ env.BRANCH_NAME }}
              prerelease: false
              draft: false
              token: ${{ env.GITHUB_TOKEN }}
              files: |
                interx_linux_amd64.deb
                interx_linux_arm64.deb
                interx_darwin_amd64.deb
                interx_darwin_arm64.deb
                interx_windows_amd64.exe
                interx_windows_arm64.exe

          # Release creator info: https://github.com/actions/create-release
#          - name: Publish release
#            id: interx-release
#            uses: actions/create-release@v1.1.4
#            env:
#              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#              BRANCH_NAME: ${GITHUB_REF##*/}
#            with:
#              tag_name: ${{ env.BRANCH_NAME }}
#              release_name: Release ${{ env.BRANCH_NAME }}
#              body_path: RELEASE.md
#              draft: false
#              prerelease: false
#          - name: Upload release assets
#            id: interx-release-assets
#            uses: actions/upload-release-asset@v1.0.2
#            env:
#              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#            with:
#              upload_url: ${{ steps.interx-release.outputs.upload_url }} 
#              asset_path: ./interx_linux_amd64.deb
#              asset_name: interx_linux_amd64.deb
#              # https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types
#              asset_content_type: application/octet-stream