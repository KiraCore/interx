name: Build, Release & Publish

on:
  push:
    branches: [ v*.*.*, feature/*, master, dev, latest, testnet-*, mainnet-*, kira-* ]
  pull_request:
    branches: [ v*.*.*, bugfix/*, master, dev, latest, testnet-*, mainnet-*, kira-* ]

jobs:
  # isolate signing & repo cloning from docker image
  setup:
    name: Repo Setup
    runs-on: ubuntu-20.04
    permissions:
      contents: read
      packages: write
      id-token: write
      pull-requests: write
    steps:
          # ref.: https://github.com/sigstore/cosign-installer, v2.1.0
          - name: Install cosign
            uses: sigstore/cosign-installer@581838fbedd492d2350a9ecd427a95d6de1e5d01
            with:
              cosign-release: 'v1.6.0'
          # ref.: https://github.com/actions/checkout, v3.0.0
          - name: Checkout repository
            uses: actions/checkout@a12a3943b4bdde767164f792f33f40b04645d846
          - name: Verify repo content
            run: |
              echo "(current dir): $PWD" && ls -l ./
              cd ../ && tar -czvf src.tar.gz -C ./interx . && cp ./src.tar.gz ./interx/src.tar.gz
          - name: Uploading artifacts
            uses: actions/upload-artifact@v3.0.0
            with:
              name: interx-src
              path: ./src.tar.gz
  build:
    name: Repo Build
    runs-on: ubuntu-20.04
    permissions:
      contents: read
      packages: write
      id-token: write
      pull-requests: write
    needs: [setup]
    container: 
      image: ghcr.io/kiracore/docker/base-image:v0.5.0.0
    steps:
          - name: Checking dependency versions
            run: |
              . /etc/profile && echo "Utils Version: $(utilsVersion)"
              go version
              echo "ENVS: $(env)"
              echo "HOME: $HOME"
              echo " PWD: $PWD"
          - name: Download artifacts
            uses: actions/download-artifact@v3.0.0
            with:
              name: interx-src
          - name: Extract branch name on push
            if: github.event_name == 'push'
            shell: bash
            run: |
              echo "SOURCE_BRANCH=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV
              echo "DESTINATION_BRANCH=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV
          - name: Extract branch name on pull request
            if: github.event_name == 'pull_request'
            env:
              REF_BRANCH: ${{ github.event.pull_request.head.ref }}
              BASE_REF_BRANCH: ${{ github.base_ref }}
            shell: bash
            run: |
              echo "SOURCE_BRANCH=$(echo ${{ env.REF_BRANCH }})" >> $GITHUB_ENV
              echo "DESTINATION_BRANCH=$(echo ${{ env.BASE_REF_BRANCH }})" >> $GITHUB_ENV
          - name: Inspecting & organizing artifacts
            run: |
              echo "(current dir): $PWD" && ls -l ./
              tar xvf ./src.tar.gz
              chmod -Rv 555 ./scripts
              REPOSITORY_NAME="${{ github.event.repository.name }}" && echo "REPOSITORY_NAME=$REPOSITORY_NAME" >> $GITHUB_ENV
              RELEASE_VER=$(./scripts/version.sh) && echo "RELEASE_VER=$RELEASE_VER" >> $GITHUB_ENV
              echo "RELEASE_VER=$RELEASE_VER" >> $GITHUB_ENV
              git ls-remote https://github.com/kiracore/${{ github.event.repository.name }} | egrep -q "refs/tags/${RELEASE_VER}$" && echo "RELEASE_EXISTS=true" >> $GITHUB_ENV || echo "RELEASE_EXISTS=false" >> $GITHUB_ENV
          - name: Print debug data before testing
            run: |
              echo "     Source branch: ${{ env.SOURCE_BRANCH }}"
              echo "Destination branch: ${{ env.DESTINATION_BRANCH }}"
              echo "       Event name: ${{ github.event_name }}"
              echo "  Repository name: ${{ env.REPOSITORY_NAME }}"
              echo "  Release version: ${{ env.RELEASE_VER }}"
              echo "   Release exists: ${{ env.RELEASE_EXISTS }}"
          - name: Testing INTERX
            run: |
              echo "(current dir): $PWD" && ls -l ./
              tar xvf ./src.tar.gz
              chmod -Rv 555 ./scripts
              make install
              interxd version
          - name: Publishing INTERX binaries
            shell: bash
            run: |
              make publish
              touch ./RELEASE.md
              cp -fv ./RELEASE.md ./bin/RELEASE.md
              chmod -Rv 777 ./bin
              echo -e "\n\r\n\r\`\`\`" >> ./bin/RELEASE.md
              echo -e "         Release Versions: $RELEASE_VER\n\r" >> ./bin/RELEASE.md
              echo " interx-darwin-amd64.deb: sha256:$(sha256sum ./bin/interx-darwin-amd64.deb  | awk '{ print $1 }')" >> ./bin/RELEASE.md
              echo " interx-darwin-arm64.deb: sha256:$(sha256sum ./bin/interx-darwin-arm64.deb  | awk '{ print $1 }')" >> ./bin/RELEASE.md
              echo "  interx-linux-amd64.deb: sha256:$(sha256sum ./bin/interx-linux-amd64.deb   | awk '{ print $1 }')" >> ./bin/RELEASE.md
              echo "  interx-linux-arm64.deb: sha256:$(sha256sum ./bin/interx-linux-arm64.deb   | awk '{ print $1 }')" >> ./bin/RELEASE.md
              echo "interx-windows-amd64.exe: sha256:$(sha256sum ./bin/interx-windows-amd64.exe | awk '{ print $1 }')" >> ./bin/RELEASE.md
              echo "interx-windows-arm64.exe: sha256:$(sha256sum ./bin/interx-windows-arm64.exe | awk '{ print $1 }')" >> ./bin/RELEASE.md
              echo -e "\`\`\`"   >> ./bin/RELEASE.md
              tar -czvf deb.tar.gz -C ./bin .
          - name: Uploading artifacts
            uses: actions/upload-artifact@v3.0.0
            with:
              name: interx-bin-deb
              path: ./deb.tar.gz
  release:
    name: Create Release
    runs-on: ubuntu-20.04
    needs: [build]
    permissions:
      contents: write
      packages: write
      id-token: write
      pull-requests: write
    steps:
          - name: Download artifacts
            uses: actions/download-artifact@v3.0.0
            with:
              name: interx-bin-deb
          - name: Inspecting & organizing artifacts
            run: |
              echo "(current dir): $PWD" && ls -l ./
              tar xvf ./deb.tar.gz
              chmod -Rv 777 ./
              echo "RELEASE_VER=$(cat ./RELEASE.md | tac | grep -Fn -m 1 'Release Versions: ' | rev | cut -d ":" -f1 | rev | xargs | tr -dc '[:alnum:]\-\.' || echo '')" >> $GITHUB_ENV
          # Branch name is also a version of the release
          # ref: https://stackoverflow.com/questions/58033366/how-to-get-the-current-branch-within-github-actions
          - name: Extract branch name on push
            if: github.event_name == 'push'
            shell: bash
            run: |
              echo "SOURCE_BRANCH=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV
              echo "DESTINATION_BRANCH=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV
          - name: Extract branch name on pull request
            if: github.event_name == 'pull_request'
            env:
              REF_BRANCH: ${{ github.event.pull_request.head.ref }}
              BASE_REF_BRANCH: ${{ github.base_ref }}
            shell: bash
            run: |
              echo "SOURCE_BRANCH=$(echo ${{ env.REF_BRANCH }})" >> $GITHUB_ENV
              echo "DESTINATION_BRANCH=$(echo ${{ env.BASE_REF_BRANCH }})" >> $GITHUB_ENV
          - name: Print debug data before publishing
            run: |
              echo "Source branch: ${{ env.SOURCE_BRANCH }}"
              echo " Dest. branch: ${{ env.DESTINATION_BRANCH }}"
              echo "   Event name: ${{ github.event_name }}"
              echo " Release ver.: ${{ env.RELEASE_VER }}"
          - name: Reject on error
            # ref.: https://github.com/andrewslotin/rummelsnuff, v1.1.0
            uses: andrewslotin/rummelsnuff@a0c9c1929f44eefff922aced1ee4dd64eddf12d6
            if: ${{ failure() }}
            with:
              spam_label: "Build Errors"
              close_spam_prs: "yes"
              access_token: ${{ secrets.GITHUB_TOKEN }}
          # ref: https://github.com/softprops/action-gh-release, v0.1.14
          # Release on merge only (push action) - this should run only once
          - name: Publish release
            if: |
              github.event_name == 'push' &&
              ( startsWith(env.SOURCE_BRANCH, 'v') && contains(env.SOURCE_BRANCH, '.') && !contains(env.SOURCE_BRANCH, 'rc') && !contains(env.SOURCE_BRANCH, '-') )
            uses: softprops/action-gh-release@1e07f4398721186383de40550babbdf2b84acfc5
            with:
              body_path: RELEASE.md
              tag_name: ${{ env.SOURCE_BRANCH }}
              name: ${{ env.SOURCE_BRANCH }}
              prerelease: false
              draft: false
              fail_on_unmatched_files: true
              files: |
                ./interx-linux-amd64.deb
                ./interx-linux-arm64.deb
                ./interx-darwin-amd64.deb
                ./interx-darwin-arm64.deb
                ./interx-windows-amd64.exe
                ./interx-windows-arm64.exe
          # ref: https://github.com/softprops/action-gh-release, v0.1.14
          # Release on merge only (push action) - this should run only once
          - name: Publish pre-release
            if: |
              github.event_name == 'push' &&
              ( startsWith(env.SOURCE_BRANCH, 'v') && contains(env.SOURCE_BRANCH, '.') && contains(env.SOURCE_BRANCH, '-') )
            uses: softprops/action-gh-release@1e07f4398721186383de40550babbdf2b84acfc5
            with:
              body_path: RELEASE.md
              tag_name: ${{ env.SOURCE_BRANCH }}
              name: ${{ env.SOURCE_BRANCH }}
              prerelease: true
              draft: false
              fail_on_unmatched_files: true
              files: |
                ./interx-linux-amd64.deb
                ./interx-linux-arm64.deb
                ./interx-darwin-amd64.deb
                ./interx-darwin-arm64.deb
                ./interx-windows-amd64.exe
                ./interx-windows-arm64.exe
          # ref.: https://github.com/hmarr/auto-approve-action, v2.1.0
          - name: Approve pull request on success
            uses: hmarr/auto-approve-action@5d04a5ca6da9aeb8ca9f31a5239b96fc3e003029
            if: |
              ( github.event_name == 'pull_request' ) &&
              ( env.SOURCE_BRANCH == env.RELEASE_VER || env.DESTINATION_BRANCH == env.RELEASE_VER )
            with:
              github-token: "${{ secrets.GITHUB_TOKEN }}"
          - name: Cleanup all resources
            shell: bash
            run: |
              rm -rfv ./*
              echo "(current dir): $PWD" && ls -l ./
          # ref.: https://github.com/actions/checkout, v3.0.0
          - name: Checkout repository
            uses: actions/checkout@a12a3943b4bdde767164f792f33f40b04645d846
          - name: Create PR from a version branch to latest
            # ref: https://github.com/repo-sync/pull-request
            if: |
              github.event_name == 'push' &&
              ( startsWith(env.SOURCE_BRANCH, 'v') && contains(env.SOURCE_BRANCH, '.') )
            uses: repo-sync/pull-request@5ba2c80b97c87b9174c1548141b7acd80f6376e1
            with:
              github_token: ${{ secrets.REPO_ACCESS }}
              source_branch: ${{ env.SOURCE_BRANCH }}
              destination_branch: 'latest'
              pr_title: "${{ env.SOURCE_BRANCH }} -> latest" 
              pr_label: "kira-automation,automerge"
              pr_allow_empty: true
          - name: Auto-merge version branch to latest branch
            uses: pascalgn/automerge-action@04dfc9eae2586d19b7362d4f6413c48135d9c25a
            if: github.event_name == 'pull_request' && env.DESTINATION_BRANCH == 'latest' &&
              ( startsWith(env.SOURCE_BRANCH, 'v') && contains(env.SOURCE_BRANCH, '.') )
            env:
              MERGE_LABELS: "automerge"
              GITHUB_TOKEN: "${{ secrets.REPO_ACCESS }}"
              LOG: "TRACE"