name: INTERX Build & Release

on:
  push:
    branches: [ v* ]
  pull_request:
    branches: [ v* ]

jobs:
  # isolate signing & repo cloning from docker image
  setup:
    name: Repo Setup
    runs-on: ubuntu-20.04
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
          - name: Install cosign
            uses: sigstore/cosign-installer@v2.1.0
            with:
              cosign-release: 'v1.6.0'
          - name: Checkout repository
            uses: actions/checkout@v3.0.0
          - name: Verify repo content
            run: |
              echo "(current dir): $PWD" && ls -l
              tar -czvf src.tar.gz --exclude=src.tar.gz .
          - name: Uploading artifacts
            uses: actions/upload-artifact@v3.0.0
            with:
              name: interx-src
              path: ./src.tar.gz
  build:
    name: Repo Build
    runs-on: ubuntu-20.04
    permissions:
      contents: read
      packages: write
      id-token: write
    needs: [setup]
    container: 
      image: ghcr.io/kiracore/docker/base-image:v0.0.2.0
    steps:
          - name: Checking dependency versions
            run: |
              . /etc/profile && echo "Utils Version: $(utilsVersion)"
              go version
              CDHelper version
              flutter --version
              dart --version
              echo "ENVS: $(env)"
              echo "HOME: $HOME"
              echo " PWD: $PWD"
          - name: Download artifacts
            uses: actions/download-artifact@v3.0.0
            with:
              name: interx-src
          - name: Testing INTERX
            run: |
              echo "(current dir): $PWD" && ls -l $PWD
              tar xvf ./src.tar.gz
              chmod -Rv 555 $PWD/scripts
              make install
              interxd version
          - name: Publishing INTERX binaries
            run: |
              make publish
              cp -fv $PWD/RELEASE.md $PWD/bin/deb
              chmod -Rv 555 $PWD/bin/deb
              tar -czvf deb.tar.gz -C $PWD/bin/deb .
          - name: Uploading artifacts
            uses: actions/upload-artifact@v3.0.0
            with:
              name: interx-bin-deb
              path: ./deb.tar.gz
  release:
    name: Build Release
    runs-on: ubuntu-20.04
    needs: [build]
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
          - name: Download artifacts
            uses: actions/download-artifact@v3.0.0
            with:
              name: interx-bin-deb
          - name: Inspecting & organizing artifacts
            run: |
              echo "(current dir): $PWD" && ls -l
              tar xvf ./deb.tar.gz
              chmod -Rv 555 ./
              echo "(current dir): $PWD" && ls -l
              cp -fv   ./darwin/interx_*_amd64.deb ./interx_darwin_amd64.deb
              cp -fv   ./darwin/interx_*_arm64.deb ./interx_darwin_arm64.deb
              cp -fv    ./linux/interx_*_amd64.deb ./interx_linux_amd64.deb
              cp -fv    ./linux/interx_*_arm64.deb ./interx_linux_arm64.deb
              cp -fv  ./windows/interx_*_amd64.deb ./interx_windows_amd64.deb
              cp -fv  ./windows/interx_*_arm64.deb ./interx_windows_arm64.deb
              rm -rfv ./windows ./linux ./darwin ./deb.tar.gz
              echo "(current dir): $PWD" && ls -l
          # Release creator info: https://github.com/actions/create-release
          - name: Publish release
            if: github.event_name != 'pull_request'
            id: interx
            uses: actions/create-release@v1.1.4
            env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              BRANCH_NAME: ${GITHUB_REF##*/}
            with:
              tag_name: ${{ env.BRANCH_NAME }}
              release_name: Release ${{ env.BRANCH_NAME }}
              body_path: RELEASE.md
              draft: false
              prerelease: false