name: Reject PRs to version branches NOT originating from feature/* or debug/* 

on:
  pull_request:
    branches: [ v* ]

jobs:
  # isolate signing & repo cloning from docker image
  setup:
    name: Build Release
    runs-on: ubuntu-20.04
    permissions:
      contents: write
      packages: write
      id-token: write
      pull-requests: write
    env:
      REF_BRANCH: ${{ github.event.pull_request.head.ref }}
      BASE_REF_BRANCH: ${{ github.base_ref }}
    steps:
          # Branch name is also a version of the release
          # ref: https://stackoverflow.com/questions/58033366/how-to-get-the-current-branch-within-github-actions
          - name: Extract branch name on pull request
            shell: bash
            run: |
              echo "SOURCE_BRANCH=$(echo ${{ env.REF_BRANCH }} | tr / -)" >> $GITHUB_ENV
              echo "DESTINATION_BRANCH=$(echo ${{ env.BASE_REF_BRANCH }} | tr / -)" >> $GITHUB_ENV
              if [[ ${{ env.SOURCE_BRANCH }} =~ ^v[0-9]+\.[0-9]+\.[0-9]+(.*)$ ]] ; then echo "SOURCE_VERSIONED=true" >> $GITHUB_ENV ; else echo "SOURCE_VERSIONED=false" >> $GITHUB_ENV ; fi
              if [[ ${{ env.DESTINATION_BRANCH }} =~ ^v[0-9]+\.[0-9]+\.[0-9]+(.*)$ ]] ; then echo "DESTINATION_VERSIONED=true" >> $GITHUB_ENV ; else echo "DESTINATION_VERSIONED=false" >> $GITHUB_ENV ; fi
          - name: Print debug data before publishing
            run: |
              echo "Source branch name: ${{ env.SOURCE_BRANCH }}"
              echo "Source versioned: ${{ env.SOURCE_VERSIONED }}"
              echo "Destination branch name: ${{ env.DESTINATION_BRANCH }}"
              echo "Destination versioned: ${{ env.DESTINATION_VERSIONED }}"
          - name: Reject if PR target is invalid
            # ref.: https://github.com/andrewslotin/rummelsnuff, v1.1.0
            uses: andrewslotin/rummelsnuff@a0c9c1929f44eefff922aced1ee4dd64eddf12d6
            if: |
              !contains(env.SOURCE_BRANCH, 'feature') &&
              !contains(env.SOURCE_BRANCH, 'bugfix')
            with:
              spam_label: "Invalid Target"
              close_spam_prs: "yes"
              access_token: ${{ secrets.GITHUB_TOKEN }} 